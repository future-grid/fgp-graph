{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"Dygraph\"","webpack:///./node_modules/moment-timezone/index.js","webpack:///external \"moment\"","webpack:///./src/extras/formatters.ts","webpack:///./src/demo.ts","webpack:///./src/index.ts","webpack:///./src/widgets/DomElements.ts","webpack:///./node_modules/moment-timezone/moment-timezone.js","webpack:///./src/extras/synchronizer.ts","webpack:///./src/extras/interactions.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Dygraph","tz","load","moment","timezone","legendForAllSeries","data","x","series","map","dashHTML","labelHTML","join","html","guess","format","forEach","isVisible","labeledData","yHTML","isHighlighted","color","legendForSingleSeries","axisLabel","granularity","hh","mm","ss","ret","momentDatetime","getTime","SHORT_MONTH_NAMES","zeropad","DECADAL","year","MONTHLY","month","hours","minutes","seconds","milliseconds","DAILY","date","Formatters","randomNumber","min","max","Math","floor","random","intervals","substation_interval_day","substation_interval","meter_read_day","meter_read","rangeData","deviceData","source","this","id","first","timestamp","Date","voltage","last","add","startOf","valueOf","avgConsumptionVah","fetchFirstNLast","ids","interval","fields","Promise","resolve","reject","fetchdata","range","tempDate","start","existData","exist","find","_data","push","end","_ed","indexOf","avg","sampleData","_id","_d","graphDiv","document","getElementById","graphDiv2","graphDiv3","formatters","dataService","DataService","vdConfig","graphConfig","features","zoom","scroll","rangeBar","legend","entities","type","rangeEntity","rangeCollection","label","exp","collections","yIndex","threshold","yLabel","y2Label","initScales","left","fill","show","ranges","initRange","subtract","interaction","callback","highlighCallback","datetime","points","selectCallback","vsConfig","vsConfig2","vsConfig3","graph3","FgpGraph","initGraph","graph2","graph1","setChildren","dom","viewConfigs","fieldPattern","RegExp","childrenGraphs","rangeBarData","serialnumber","datewindowHandler","datewindow","graph","updateDatewinow","operator","GraphOperator","rangeBarGraph","graphContainer","body","intervalsDropdown","header","view","selected","DropdownButton","viewsDropdown","render","onchange","e","choosedView","target","config","init","refresh","xAxisRange","updateOptions","dateWindow","graphs","concat","defaultGraphRanges","parentDom","DomElementOperator","createElement","intervalLabelsArea","seriesDropdown","appendChild","select","buttons","innerHTML","btns","element","opt","text","dropdownArea","opts","dropdown","div","setAttribute","span","content","li","checkbox","checked","addEventListener","getAttribute","append","DropdownMenu","optElement","SelectWithCheckbox","attrs","attr","mainGraph","rangeGraph","graphBody","datewindowCallback","yAxisRanges","updateCollectionLabels","choosedCollection","labels","getElementsByClassName","firstLabelArea","length","_collection","labelAttrs","innerText","updateSeriesDropdown","_series","visibility","getOption","getLabels","index","readyCallback","interactionCallback","currentView","bottomAttrs","bottom","entity","timewindowEnd","timewindowStart","arr","graphRangesConfig","dropdownOpts","intervalDropdown","currentTarget","ragnebarGraph","collection","currentCollection","update","fieldsForCollection","_tempFields","match","FIELD_PATTERN","replace","Array","from","Set","then","resp","entityData","firstRanges","Error","width","offsetWidth","round","initialData","isY2","mainGraphLabels","_index","yScale","y2Scale","valueRange","right","currentDatewindowOnMouseDown","datewindowChangeFunc","yAxisRange","sort","a","b","assign","startLabelLeft","endLabelRight","interactionModel","GraphInteractions","refreshData","currentSelection","ylabel","y2label","rangeSelectorHeight","legendFormatter","labelsKMB","axes","axisLabelFormatter","y","y2","highlightSeriesOpts","strokeWidth","highlightCallback","ps","row","seriesName","clickCallback","mouseDown","mouseUp","mouseMove","mouseScroll","mouseEnter","drawCallback","dygraph","is_initial","bottoms","removeChild","axis","dateLabels","xAxisHeight","drawAxis","axisLabelWidth","showRangeSelector","Synchronizer","synchronize","rangeBarCanvas","rangeBarHandles","rangebarMousedownFunc","window","once","style","rangebarGraph","graphCollection","mainEntities","fieldsForMainGraph","yAxis","yAxis2","yIndexs","y2Indexs","colors","mainGraphSeries","highlightCircleSize","prepareGraphData","graphData","finalData","_dates","item","f","Function","point","record","_yIndex","hidden_ctx_","clearRect","hidden_","height","file","fillGraph","currentDatewindowData","preData","file_","_exist","_oldData","splice","rangeSeries","root","factory","cachedGuess","zones","links","names","guesses","version","logError","momentVersion","split","major","minor","charCodeToInt","charCode","unpackBase60","string","parts","whole","fractional","multiplier","out","sign","charCodeAt","arrayToInt","array","mapIndices","indices","unpack","offsets","untils","Infinity","intToUntil","abbrs","population","Zone","packedString","_set","OffsetAt","at","timeString","toTimeString","abbr","undefined","offset","getTimezoneOffset","ZoneScore","zone","offsetScore","abbrScore","findChange","low","high","mid","diff","sortZoneScores","localeCompare","addToGuesses","guessesForUserOffsets","j","guessesOffset","offsetsLength","filteredGuesses","rebuildGuess","intlName","Intl","DateTimeFormat","resolvedOptions","timeZone","normalizeName","zoneScore","change","next","startYear","getFullYear","userOffsets","zoneScores","getZone","scoreOffsetAt","toLowerCase","addZone","packed","normalized","caller","link","addLink","aliases","alias","normal0","normal1","needsOffset","isUnixTimestamp","_f","_a","_tzm","message","console","error","input","args","slice","arguments","utc","apply","isMoment","parse","unpacked","offsetNext","offsetPrev","moveAmbiguousForward","moveInvalidForward","mom","utcOffset","offsetAt","abs","dataVersion","_zones","_links","_names","zoneExists","didShowError","ignoreCache","old","fn","abbrWrap","_z","resetZoneWrap","defaultZone","updateOffset","keepTime","_isUTC","z","zoneName","zoneAbbr","local","setDefault","momentProperties","toString","OPTIONS","selection","dygraphs","prevCallbacks","parseOpts","obj","optName","arraysAreEqual","isArray","attachZoomHandlers","gs","syncOpts","block","me","initial","attachSelectionHandlers","event","idx","getRowForX","setSelection","unhighlightCallback","clearSelection","readycount","ready","callBackTypes","k","getFunctionOption","detach","g","dateRange","pageX","pageY","dragGetX_","context","px","dragGetY_","py","cancelEvent","stopPropagation","preventDefault","cancelBubble","cancel","returnValue","offsetToPercentage","offsetX","offsetY","xOffset","toDomCoords","yar0","yOffset","w","h","pan","side","dragEndX","dragEndY","minDate","initialLeftmostDate","dragStartX","xUnitsPerPixel","boundedDates","maxDate","is2DPan","pixelsDragged","dragStartY","zoomRange","getOptionForAxis","dateWindow_","pow","axes_","axis_data","unitsDragged","unitsPerPixel","boundedValue","boundedValues","maxValue","initialTopValue","minValue","dragValueRange","attributes_","getForAxis","drawGraph_","adjustAxis","zoomInPercentage","bias","increment","foo","xBias","yBias","direction","yAxes","newYAxes","numAxes","scrollTimer","clearTimeout","newZoomRange","setTimeout","currentDatewindow","isPanning","endPan","panEnable","needRefresh","preDatewindow","yAxisRangeChanged","initializeMouseDown","startPan","plotter_","area","mouseOut","mouseTimer","scrollEnable","percentage","WheelEvent","detail","deltaY","wheelDelta","layerX","offsetLeft","layerY","offsetTop","percentages","xPct","yPct"],"mappings":"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","file":"fgp-graph.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","module.exports = Dygraph;","var moment = module.exports = require(\"./moment-timezone\");\nmoment.tz.load(require('./data/packed/latest.json'));\n","module.exports = moment;","import Dygraph from 'dygraphs';\nimport moment from 'moment-timezone';\n\nexport class Formatters {\n\n    constructor(public timezone: string) {\n\n    }\n\n\n    legendForAllSeries = (data) => {\n        if (data.x == null) {\n            // This happens when there's no selection and {legend: 'always'} is set.\n            return '<br>' + data.series.map(function (series) { return series.dashHTML + ' ' + series.labelHTML }).join('<br>');\n        }\n        var html = moment.tz(data.x, this.timezone ? this.timezone : moment.tz.guess()).format('lll z');\n        data.series.forEach(function (series) {\n            if (!series.isVisible) return;\n            var labeledData = series.labelHTML + ': ' + series.yHTML;\n            if (series.isHighlighted) {\n                labeledData = '<b style=\"color:' + series.color + ';\">' + labeledData + '</b>';\n            }\n            html += '<br>' + series.dashHTML + ' ' + labeledData;\n        });\n        return html;\n    }\n\n\n    legendForSingleSeries = (data) => {\n        if (data.x == null) {\n            // This happens when there's no selection and {legend: 'always'} is set.\n            return '<br>' + data.series.map(function (series) { return series.dashHTML + ' ' + series.labelHTML }).join('<br>');\n        }\n\n        var html = moment.tz(data.x, this.timezone ? this.timezone : moment.tz.guess()).format('lll z');\n\n        data.series.forEach(function (series) {\n            if (!series.isVisible) return;\n            var labeledData = series.labelHTML + ': ' + series.yHTML;\n            if (series.isHighlighted) {\n                labeledData = '<b style=\"color:' + series.color + ';\">' + labeledData + '</b>';\n                html += '<br>' + series.dashHTML + ' ' + labeledData;\n            }\n        });\n        return html;\n    }\n\n    axisLabel = (d, granularity) => {\n        // don't put it into formatters.ts becault we need to timezone later\n        let momentDatetime = moment.tz(d.getTime(), this.timezone ? this.timezone : moment.tz.guess());\n        let SHORT_MONTH_NAMES = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        let zeropad = (x) => {\n            if (x < 10) return \"0\" + x;\n            else return \"\" + x;\n        };\n\n        let hmsString_ = (hh, mm, ss) => {\n            var ret = zeropad(hh) + \":\" + zeropad(mm);\n            if (ss) {\n                ret += \":\" + zeropad(ss);\n            }\n            return ret;\n        };\n\n        if (granularity >= Dygraph.DECADAL) {\n            return '' + momentDatetime.year();\n        } else if (granularity >= Dygraph.MONTHLY) {\n            return SHORT_MONTH_NAMES[momentDatetime.month() + 1] + '&#160;' + momentDatetime.year();\n        } else {\n            var frac = momentDatetime.hours() * 3600 + momentDatetime.minutes() * 60 + momentDatetime.seconds() + 1e-3 * momentDatetime.milliseconds();\n            if (frac === 0 || granularity >= Dygraph.DAILY) {\n                // e.g. '21 Jan' (%d%b)\n                return zeropad(momentDatetime.date()) + '&#160;' + SHORT_MONTH_NAMES[momentDatetime.month() + 1];\n            } else {\n                return hmsString_(momentDatetime.hours(), momentDatetime.minutes(), momentDatetime.seconds());\n            }\n        }\n    }\n\n}","import { FgpGraph } from \"./index\";\nimport { GraphConfig, ViewConfig } from \"./metadata/configurations\";\nimport { DataHandler } from \"./services/dataService\";\nimport moment from 'moment-timezone';\nimport { Formatters } from \"./extras/formatters\";\nimport { Synchronizer } from \"./extras/synchronizer\";\n\nclass DataService implements DataHandler {\n    randomNumber = (min, max) => { // min and max included \n        return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n\n    intervals = {\n        substation_interval_day: 86400000,\n        substation_interval: 3600000,\n        meter_read_day: 86400000,\n        meter_read: 3600000\n    };\n\n    private rangeData = [];\n\n    private deviceData = [];\n\n    constructor() {\n        this.rangeData = [{ id: \"meter1\", data: { first: { timestamp: new Date(\"2019/06/01\").getTime(), voltage: this.randomNumber(252, 255) }, last: { timestamp: moment().add(1, 'days').startOf('day').valueOf(), voltage: this.randomNumber(252, 255) } } }, { id: \"meter2\", data: { first: { timestamp: new Date(\"2019/06/01\").getTime(), voltage: this.randomNumber(252, 255) }, last: { timestamp: moment().add(1, 'days').startOf('day').valueOf(), voltage: this.randomNumber(252, 255) } } }, { id: \"meter3\", data: { first: { timestamp: new Date(\"2019/06/01\").getTime(), voltage: this.randomNumber(252, 255) }, last: { timestamp: moment().add(1, 'days').startOf('day').valueOf(), voltage: this.randomNumber(252, 255) } } }, { id: \"substation1\", data: { first: { timestamp: new Date(\"2019/06/01\").getTime(), avgConsumptionVah: this.randomNumber(252, 255) }, last: { timestamp: moment().add(1, 'days').startOf('day').valueOf(), avgConsumptionVah: this.randomNumber(252, 255) } } }]\n    }\n\n\n\n    fetchFirstNLast(ids: string[], interval: string, fields?: string[]): Promise<{ id: string; data: { first: any; last: any; }; }[]> {\n        // console.debug(\"fetching data for first and last~\");\n\n        return new Promise((resolve, reject) => {\n            // sample data for first and last\n            resolve(this.rangeData);\n        });\n    }\n\n    fetchdata(ids: string[], interval: string, range: { start: number; end: number; }, fields?: string[]): Promise<{ id: string; data: any[]; }[]> {\n        // console.debug(\"fetching data from server...\");\n        let tempDate = moment(range.start).startOf('day').valueOf(); \n        let existData = [];\n        ids.forEach(id => {\n            let exist = this.deviceData.find((_data) => {\n                return _data.id == id && _data.interval == interval;\n            });\n            if (!exist) {\n                exist = { id: id, interval: interval, data: [] };\n                this.deviceData.push(exist);\n            }\n            existData.push(exist);\n        });\n\n        while (tempDate <= range.end) {\n            // create data for different devices with correct interval\n            existData.forEach(_ed => {\n                if (_ed.id.indexOf('meter') != -1) {\n                    // get existing data\n                    if (_ed.interval == interval) {\n                        // find data\n                        let recordExist = false;\n                        _ed.data.forEach(_data => {\n                            if (_data.timestamp == tempDate) {\n                                // found it\n                                recordExist = true;\n                            }\n                        });\n                        if (!recordExist) {\n                            // add new one\n                            _ed.data.push({ 'timestamp': tempDate, 'voltage': this.randomNumber(252, 255), 'amp': this.randomNumber(1, 2), 'avgVoltage': this.randomNumber(250, 255) });\n                        }\n                    }\n\n                } else if (_ed.id.indexOf('substation') != -1) {\n                    if (_ed.interval == interval) {\n                        // find data\n                        let recordExist = false;\n                        _ed.data.forEach(_data => {\n                            if (_data.timestamp == tempDate) {\n                                // found it\n                                recordExist = true;\n                            }\n                        });\n                        if (!recordExist) {\n                            let max: number = this.randomNumber(253, 255);\n                            let min: number = this.randomNumber(250, 252);\n                            let avg: number = Math.floor((max + min) / 2);\n                            // add new one\n                            _ed.data.push({ 'timestamp': tempDate, 'avgConsumptionVah': avg, 'maxConsumptionVah': max, 'minConsumptionVah': min });\n                        }\n                    }\n                }\n            });\n            tempDate += this.intervals[interval];\n        }\n\n        return new Promise((resolve, reject) => {\n            let sampleData: Array<{ id: string, data: Array<any> }> = [];\n            // find data for current device and interval\n            this.deviceData.forEach(_data => {\n                ids.forEach(_id => {\n                    if(_id == _data.id && _data.interval == interval){\n                        // found data\n                        let _records = [];\n                        _data.data.forEach(_d => {\n                            if(_d.timestamp >= range.start && _d.timestamp <= range.end){\n                                _records.push(_d);\n                            }\n                        });\n                        sampleData.push({id:_id, data: _records});\n                    }\n                });\n            });\n            resolve(sampleData);\n        });\n    }\n\n\n    source: string = \"meter_interval\";\n\n}\n\n\nlet graphDiv: HTMLDivElement = document.getElementById(\"graphArea\") as HTMLDivElement;\nlet graphDiv2: HTMLDivElement = document.getElementById(\"graphArea2\") as HTMLDivElement;\nlet graphDiv3: HTMLDivElement = document.getElementById(\"graphArea3\") as HTMLDivElement;\nlet formatters: Formatters = new Formatters(\"Australia/Melbourne\");\n// let formatters:Formatters = new Formatters(\"Pacific/Auckland\");\n\n// data not needed in the future\nconst dataService: DataHandler = new DataService();\ndataService.source = \"store\";\nlet vdConfig: ViewConfig = {\n    name: \"device view\",\n    graphConfig: {\n        features: {\n            zoom: true,\n            scroll: true,\n            rangeBar: true,\n            legend: formatters.legendForAllSeries\n        },\n        entities: [\n            { id: \"substation1\", type: \"substation\", name: \"**F**substation\" },\n        ],\n        rangeEntity: { id: \"substation1\", type: \"substation\", name: \"**F**substation\" },\n        rangeCollection: {\n            label: 'substation_day',\n            name: 'substation_interval_day',\n            interval: 86400000,\n            series: [\n                { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\" }\n            ]\n        },\n        collections: [\n            {\n                label: 'substation_raw',\n                name: 'substation_interval',\n                interval: 3600000,\n                series: [\n                    { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\", yIndex: 'left', color: '#058902' },\n                    { label: \"Max\", type: 'line', exp: \"data.maxConsumptionVah\", yIndex: 'left', color: '#d80808' },\n                    { label: \"Min\", type: 'line', exp: \"data.minConsumptionVah\", yIndex: 'left', color: '#210aa8' }\n                ],\n                threshold: { min: 0, max: (1000 * 60 * 60 * 24 * 10) },    //  0 ~ 10 days\n                yLabel: 'voltage',\n                y2Label: 'voltage',\n                initScales: { left: { min: 245, max: 260 } },\n                fill: false\n            }, {\n                label: 'substation_day',\n                name: 'substation_interval_day',\n                interval: 86400000,\n                series: [\n                    { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\", yIndex: 'left' },\n                    { label: \"Max\", type: 'line', exp: \"data.maxConsumptionVah\", yIndex: 'left' },\n                    { label: \"Min\", type: 'line', exp: \"data.minConsumptionVah\", yIndex: 'left' }\n                ],\n                threshold: { min: (1000 * 60 * 60 * 24 * 10), max: (1000 * 60 * 60 * 24 * 7 * 52 * 10) },    // 7 days ~ 3 weeks\n                yLabel: 'voltage',\n                y2Label: 'voltage',\n                initScales: { left: { min: 230, max: 260 } },\n                fill: false\n            }\n        ]\n    },\n    dataService: dataService,\n    show: true,\n    ranges: [\n        { name: \"7 days\", value: 604800000, show: true },\n        { name: \"1 month\", value: 2592000000 }\n    ],\n    initRange: {\n        start: moment().subtract(10, 'days').startOf('day').valueOf(),\n        end: moment().add(1, 'days').valueOf()\n    },\n    interaction: {\n        callback: {\n            highlighCallback: (datetime, series, points) => {\n                // console.debug(\"selected series: \", series);\n            },\n            selectCallback: (series) => {\n                // console.debug(\"choosed series: \", series);\n            }\n        }\n    },\n    timezone: 'Australia/Melbourne'\n    // timezone: 'Pacific/Auckland'\n};\n\nlet vsConfig: ViewConfig = {\n    name: \"scatter view\",\n    graphConfig: {\n        features: {\n            zoom: true,\n            scroll: true,\n            rangeBar: true,\n            legend: formatters.legendForSingleSeries\n        },\n        entities: [\n            { id: \"meter1\", type: \"meter\", name: \"meter1\" },\n            { id: \"meter2\", type: \"meter\", name: \"meter2\" }\n        ],\n        rangeEntity: { id: \"substation1\", type: \"substation\", name: \"**F**substation\" },\n        rangeCollection: {\n            label: 'substation_day',\n            name: 'substation_interval_day',\n            interval: 86400000,\n            series: [\n                { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\" }\n            ]\n        },\n        collections: [\n            {\n                label: 'meter_raw',\n                name: 'meter_read',\n                interval: 3600000,\n                series: [\n                    { label: \"Voltage\", type: 'line', exp: \"data.voltage\", yIndex: 'left' }\n                ],\n                threshold: { min: 0, max: (1000 * 60 * 60 * 24 * 10) },    //  0 ~ 10 days\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }, {\n                label: 'meter_day',\n                name: 'meter_read_day',\n                interval: 86400000,\n                series: [\n                    { label: \"Avg Voltage\", type: 'line', exp: \"data.avgVoltage\", yIndex: 'left' }\n                ],\n                threshold: { min: (1000 * 60 * 60 * 24 * 10), max: (1000 * 60 * 60 * 24 * 7 * 52 * 10) },    // 7 days ~ 3 weeks\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }\n        ]\n    },\n    dataService: dataService,\n    show: false,\n    ranges: [\n        { name: \"7 days\", value: 604800000, show: true },\n        { name: \"1 month\", value: 2592000000 }\n    ],\n    initRange: {\n        start: moment().subtract(10, 'days').startOf('day').valueOf(),\n        end: moment().add(1, 'days').valueOf()\n    },\n    interaction: {\n        callback: {\n            highlighCallback: (datetime, series, points) => {\n                // console.debug(\"selected series: \", series);\n            },\n            selectCallback: (series) => {\n                // console.debug(\"choosed series: \", series);\n            }\n        }\n    },\n    timezone: 'Australia/Melbourne'\n    // timezone: 'Pacific/Auckland'\n};\n\n\n\nlet vsConfig2: ViewConfig = {\n    name: \"scatter view\",\n    graphConfig: {\n        features: {\n            zoom: true,\n            scroll: false,\n            rangeBar: false,\n            legend: formatters.legendForSingleSeries\n        },\n        entities: [\n            { id: \"meter1\", type: \"meter\", name: \"meter1\" },\n            { id: \"meter2\", type: \"meter\", name: \"meter2\" }\n        ],\n        rangeEntity: { id: \"substation1\", type: \"substation\", name: \"**F**substation\" },\n        rangeCollection: {\n            label: 'substation_day',\n            name: 'substation_interval_day',\n            interval: 86400000,\n            series: [\n                { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\" }\n            ]\n        },\n        collections: [\n            {\n                label: 'meter_raw',\n                name: 'meter_read',\n                interval: 3600000,\n                series: [\n                    { label: \"Voltage\", type: 'line', exp: \"data.voltage\", yIndex: 'left' }\n                ],\n                threshold: { min: 0, max: (1000 * 60 * 60 * 24 * 10) },    //  0 ~ 10 days\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }, {\n                label: 'meter_day',\n                name: 'meter_read_day',\n                interval: 86400000,\n                series: [\n                    { label: \"Avg Voltage\", type: 'line', exp: \"data.avgVoltage\", yIndex: 'left' }\n                ],\n                threshold: { min: (1000 * 60 * 60 * 24 * 10), max: (1000 * 60 * 60 * 24 * 7 * 52 * 10) },    // 7 days ~ 3 weeks\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }\n        ]\n    },\n    dataService: dataService,\n    show: true,\n    ranges: [\n        { name: \"7 days\", value: 604800000, show: true },\n        { name: \"1 month\", value: 2592000000 }\n    ],\n    initRange: {\n        start: moment().subtract(10, 'days').startOf('day').valueOf(),\n        end: moment().add(1, 'days').valueOf()\n    },\n    interaction: {\n        callback: {\n            highlighCallback: (datetime, series, points) => {\n                // console.debug(\"selected series: \", series);\n            },\n            selectCallback: (series) => {\n                // console.debug(\"choosed series: \", series);\n            }\n        }\n    },\n    timezone: 'Australia/Melbourne'\n    // timezone: 'Pacific/Auckland'\n};\nlet vsConfig3: ViewConfig = {\n    name: \"scatter view\",\n    graphConfig: {\n        features: {\n            zoom: true,\n            scroll: false,\n            rangeBar: false,\n            legend: formatters.legendForSingleSeries\n        },\n        entities: [\n            { id: \"meter1\", type: \"meter\", name: \"meter1\" },\n            { id: \"meter2\", type: \"meter\", name: \"meter2\" }\n        ],\n        rangeEntity: { id: \"substation1\", type: \"substation\", name: \"**F**substation\" },\n        rangeCollection: {\n            label: 'substation_day',\n            name: 'substation_interval_day',\n            interval: 86400000,\n            series: [\n                { label: \"Avg\", type: 'line', exp: \"data.avgConsumptionVah\" }\n            ]\n        },\n        collections: [\n            {\n                label: 'meter_raw',\n                name: 'meter_read',\n                interval: 3600000,\n                series: [\n                    { label: \"Voltage\", type: 'line', exp: \"data.voltage\", yIndex: 'left' }\n                ],\n                threshold: { min: 0, max: (1000 * 60 * 60 * 24 * 10) },    //  0 ~ 10 days\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }, {\n                label: 'meter_day',\n                name: 'meter_read_day',\n                interval: 86400000,\n                series: [\n                    { label: \"Avg Voltage\", type: 'line', exp: \"data.avgVoltage\", yIndex: 'left' }\n                ],\n                threshold: { min: (1000 * 60 * 60 * 24 * 10), max: (1000 * 60 * 60 * 24 * 7 * 52 * 10) },    // 7 days ~ 3 weeks\n                initScales: { left: { min: 245, max: 260 } },\n                yLabel: 'voltage'\n            }\n        ]\n    },\n    dataService: dataService,\n    show: true,\n    ranges: [\n        { name: \"7 days\", value: 604800000, show: true },\n        { name: \"1 month\", value: 2592000000 }\n    ],\n    initRange: {\n        start: moment().subtract(10, 'days').startOf('day').valueOf(),\n        end: moment().add(1, 'days').valueOf()\n    },\n    interaction: {\n        callback: {\n            highlighCallback: (datetime, series, points) => {\n                // console.debug(\"selected series: \", series);\n            },\n            selectCallback: (series) => {\n                // console.debug(\"choosed series: \", series);\n            }\n        }\n    },\n    timezone: 'Australia/Melbourne'\n    // timezone: 'Pacific/Auckland'\n};\n\n\n\nlet graph3 = new FgpGraph(graphDiv3, [vsConfig3]);\ngraph3.initGraph();\n\nlet graph2 = new FgpGraph(graphDiv2, [vsConfig2]);\ngraph2.initGraph();\n// graph1\nlet graph1 = new FgpGraph(graphDiv, [vdConfig, vsConfig]);\ngraph1.initGraph();\n\n// link graphs\ngraph1.setChildren([graph2, graph3]);\n\ngraph2.setChildren([graph1]);   // problem with right and left axis \n\n\n","import Dygraph from \"dygraphs\";\n\nimport { DomAttrs, GraphConfig, ViewConfig, GraphCollection } from \"./metadata/configurations\";\nimport { numberLiteralTypeAnnotation } from \"@babel/types\";\nimport { DropdownButton, DomElementOperator, GraphOperator } from \"./widgets/DomElements\";\n\nimport { Synchronizer } from \"./extras/synchronizer\";\n\nexport class FgpGraph {\n\n    private graphContainer: HTMLElement;\n\n    private header: HTMLElement;\n\n    private body: HTMLElement;\n\n    private bottom: HTMLElement;\n\n    private graph: Dygraph;\n\n    private rangeBarGraph: Dygraph;\n\n    private viewConfigs: Array<ViewConfig>;\n\n    private defaultGraphRanges: Array<{ name: string, value: number, show?: boolean }>;\n\n    private parentDom: HTMLElement;\n\n    private viewsDropdown: HTMLElement;\n\n    private intervalsDropdown: HTMLElement;\n\n    private intervalLabelsArea: HTMLElement;\n\n    private seriesDropdown: HTMLElement;\n\n    private fieldPattern = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n    private childrenGraphs: Array<FgpGraph> = [];\n\n    // store locally\n    private rangeBarData: any = [];\n\n    public serialnumber = -1;\n\n    private operator: GraphOperator;\n\n    constructor(dom: HTMLElement, viewConfigs: Array<ViewConfig>) {\n\n        this.defaultGraphRanges = [\n            { name: \"3 days\", value: (1000 * 60 * 60 * 24 * 3), show: true },\n            { name: \"7 days\", value: 604800000, show: true },\n            { name: \"1 month\", value: 2592000000, show: false }\n        ];\n        this.parentDom = dom;\n\n        this.serialnumber = (Math.random() * 10000 | 0) + 1;\n        // console.debug(\"serialNumber\", this.serialnumber);\n\n        let viewsDropdownAttrs: Array<DomAttrs> = [{ key: 'class', value: \"fgp-views-dropdown\" }];\n        this.viewsDropdown = DomElementOperator.createElement('select', viewsDropdownAttrs);\n\n        let intervalsDropdownAttrs: Array<DomAttrs> = [{ key: 'class', value: \"fgp-intervals-dropdown\" }];\n        this.intervalsDropdown = DomElementOperator.createElement('select', intervalsDropdownAttrs);\n\n        let intervalsLabelsAttrs: Array<DomAttrs> = [{ key: 'class', value: \"fgp-interval-labels\" }];\n        this.intervalLabelsArea = DomElementOperator.createElement('div', intervalsLabelsAttrs);\n\n        let seriesDropdownAttrs: Array<DomAttrs> = [{ key: 'class', value: \"fgp-series-dropdown\" }];\n        this.seriesDropdown = DomElementOperator.createElement('div', seriesDropdownAttrs);\n\n        let headerAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-header' }];\n        this.header = DomElementOperator.createElement('div', headerAttrs);\n        this.header.appendChild(this.viewsDropdown);\n        this.header.appendChild(this.intervalsDropdown);\n        this.header.appendChild(this.seriesDropdown);\n        this.header.appendChild(this.intervalLabelsArea);\n        // create doms\n        let containerAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-container noselect' }];\n        this.graphContainer = DomElementOperator.createElement('div', containerAttrs);\n        this.graphContainer.appendChild(this.header);\n\n        let bodyAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-body' }];\n        this.body = DomElementOperator.createElement('div', bodyAttrs);\n        this.graphContainer.appendChild(this.body);\n        this.parentDom.appendChild(this.graphContainer);\n        this.viewConfigs = viewConfigs;\n    }\n\n    private datewindowHandler = (datewindow: Array<number>) => {\n\n        this.childrenGraphs.forEach(graph => {\n            // call updateDatewinow\n            if (graph.serialnumber != this.serialnumber) {\n                graph.updateDatewinow(datewindow);\n            }\n        });\n\n    }\n\n\n\n    /**\n     * init graph with configuration\n     *\n     * @private\n     * @memberof FgpGraph\n     */\n    public initGraph = () => {\n        this.operator = new GraphOperator(this.graph, this.rangeBarGraph, this.graphContainer, this.body, this.intervalsDropdown, this.header, this.datewindowHandler);\n        // which \"view\" should be shown first? device or scatter?\n        if (this.viewConfigs) {\n            let showView: ViewConfig = null;\n            let dropdownOpts: Array<{ id: string, label: string, selected?: boolean }> = [];\n            this.viewConfigs.forEach(view => {\n                if (view.show) {\n                    // init graph \n                    showView = view;\n                }\n                dropdownOpts.push({ id: view.name, label: view.name, selected: view.show });\n            });\n            // add options into view dropdown list\n            const viewsDropdonwOptions = new DropdownButton(<HTMLSelectElement>this.viewsDropdown, [...dropdownOpts]);\n            viewsDropdonwOptions.render();\n            // add callback handler\n            this.viewsDropdown.onchange = (e) => {\n                const choosedView = (<HTMLSelectElement>e.target).value;\n                // change view\n                // console.debug(\"Current View: \", choosedView);\n                // find view \n                this.viewConfigs.forEach(config => {\n                    if (config.name === choosedView) {\n                        this.operator.init(config, (graph) => {\n                            this.graph = graph;\n\n                            this.childrenGraphs.forEach(graph => {\n                                // call updateDatewinow\n                                if (graph.serialnumber != this.serialnumber) {\n                                    // update data\n                                    graph.operator.refresh();\n                                }\n                            });\n\n                        }, () => {\n                            this.childrenGraphs.forEach(graph => {\n                                // call updateDatewinow\n                                if (graph.serialnumber != this.serialnumber) {\n                                    // update data\n                                    graph.operator.refresh();\n                                }\n                            });\n                        });\n                    }\n                });\n            }\n\n            if (showView) {\n                this.operator.init(showView, (graph) => {\n                    this.graph = graph;\n                }, () => {\n                    this.childrenGraphs.forEach(graph => {\n                        // call updateDatewinow\n                        if (graph.serialnumber != this.serialnumber) {\n                            // update data\n                            graph.operator.refresh();\n                        }\n                    });\n                });\n            }\n        }\n    }\n\n\n\n\n    public updateDatewinow = (datewindow: Array<number>) => {\n        // update graph \n        if (this.graph) {\n            const range: Array<number> = this.graph.xAxisRange();\n            // if datewindow same then ignorn that\n            if (range[0] != datewindow[0] || range[1] != datewindow[1]) {\n                this.graph.updateOptions({\n                    dateWindow: datewindow\n                });\n            }\n        }\n    }\n\n    public setChildren = (graphs: Array<FgpGraph>) => {\n        this.childrenGraphs = this.childrenGraphs.concat(graphs);\n    }\n\n\n}","import Dygraph from 'dygraphs';\nimport { ViewConfig, GraphCollection, DomAttrs, GraphSeries, Entity } from '../metadata/configurations';\nimport moment from 'moment-timezone';\nimport { Synchronizer } from '../extras/synchronizer';\nimport { DataHandler } from '../services/dataService';\nimport { GraphInteractions } from '../extras/interactions';\nimport { Formatters } from '../extras/formatters';\nimport { arrayExpression } from '@babel/types';\n\nexport class DropdownButton {\n\n    private select: HTMLSelectElement;\n\n    private btns: Array<{ id: string, label: string, selected?: boolean }>;\n    constructor(select: HTMLSelectElement, buttons: Array<{ id: string, label: string, selected?: boolean, formatter?: any }>) {\n        this.select = select;\n        this.btns = buttons;\n    }\n\n    /**\n     * generate options\n     *\n     * @memberof DropdownButton\n     */\n    render = () => {\n        // remove all first\n        this.select.innerHTML = '';\n        this.btns.forEach(element => {\n            let opt: HTMLOptionElement = document.createElement('option');\n            opt.text = element.label;\n            opt.value = element.id;\n            if (element.selected) {\n                opt.selected = true;\n            }\n            // add it into select\n            this.select.add(opt);\n        });\n    }\n}\n\n\nexport class DropdownMenu {\n    private dropdown: HTMLElement; // div\n    private opts: Array<{ checked: boolean, name: string, label: string }>;\n    private callback: any;\n\n    constructor(dropdownArea: HTMLElement, opts: Array<{ checked: boolean, name: string, label: string }>, callback: any) {\n        this.dropdown = dropdownArea;\n        this.opts = opts;\n        this.callback = callback;\n    }\n    render = () => {\n        this.dropdown.innerHTML = '';\n        let div: HTMLElement = document.createElement('div');\n        div.setAttribute(\"class\", \"fgp-graphs-dropdown\");\n        //\n        let span: HTMLElement = document.createElement('div');\n        span.innerHTML = `\n        <select>\n            <option disabled selected>series</option>\n        </select>`;\n        let content: HTMLElement = document.createElement('ul');\n        content.setAttribute('class', \"dropdown-content\");\n\n        // add options\n        this.opts.forEach(opt => {\n            // create li\n            let li: HTMLElement = document.createElement('li');\n            let checkbox: HTMLElement = document.createElement('input');\n            checkbox.setAttribute(\"type\", \"checkbox\");\n            if (opt.checked) {\n                checkbox.setAttribute(\"checked\", \"checked\");\n                checkbox.setAttribute(\"data-value\", opt.label);\n            }\n            checkbox.addEventListener(\"click\", (e) => {\n                //\n                let series = (<HTMLInputElement>e.target).getAttribute(\"data-value\");\n                let checked = (<HTMLInputElement>e.target).checked;\n                // console.debug(\"series: \", series, checked);\n                // update graph with callback function\n                this.callback(series, checked);\n            });\n            li.appendChild(checkbox);\n            li.append(' ' + opt.label);\n            content.appendChild(li);\n        });\n        //\n        div.appendChild(span);\n        div.appendChild(content);\n        this.dropdown.appendChild(div);\n    }\n}\n\n\nexport class SelectWithCheckbox {\n\n    private select: HTMLSelectElement;\n    private opts: Array<{ checked: boolean, name: string, label: string }>;\n\n    constructor(select: HTMLSelectElement, opts: Array<{ checked: boolean, name: string, label: string }>) {\n        this.select = select;\n        this.opts = opts;\n    }\n\n    render = () => {\n        this.select.innerHTML = \"\";\n        // create options\n        this.opts.forEach(opt => {\n            let optElement: HTMLOptionElement = document.createElement('option');\n            let checkbox: HTMLInputElement = document.createElement('input');\n            checkbox.setAttribute(\"type\", \"checkbox\");\n            optElement.appendChild(checkbox);\n            optElement.append(opt.label);\n            this.select.add(optElement);\n        });\n    }\n\n}\n\n\nexport class DomElementOperator {\n\n    static createElement = (type: string, attrs: Array<DomAttrs>): HTMLElement => {\n        let dom: HTMLElement = document.createElement(type);\n        // put attributes on element\n        attrs.forEach(attr => {\n            dom.setAttribute(attr.key, attr.value);\n        });\n\n        return dom;\n    }\n\n}\n\n\n\nexport class GraphOperator {\n\n    public static FIELD_PATTERN = new RegExp(/data[.]{1}[a-zA-Z0-9]+/g);\n\n    defaultGraphRanges: Array<{ name: string, value: number, show?: boolean }> = [\n        { name: \"3 days\", value: (1000 * 60 * 60 * 24 * 3), show: true },\n        { name: \"7 days\", value: 604800000, show: true },\n        { name: \"1 month\", value: 2592000000, show: false }\n    ];\n\n    createElement = (type: string, attrs: Array<DomAttrs>): HTMLElement => {\n        let dom: HTMLElement = document.createElement(type);\n        // put attributes on element\n        attrs.forEach(attr => {\n            dom.setAttribute(attr.key, attr.value);\n        });\n\n        return dom;\n    }\n\n    private mainGraph: Dygraph;\n\n    private ragnebarGraph: Dygraph;\n\n    private currentView: ViewConfig;\n\n    private currentCollection: GraphCollection;\n\n    private rangeCollection: GraphCollection;\n\n    private start: number;\n\n    private end: number;\n\n    public datewindowCallback: any;\n\n    private graphContainer: HTMLElement;\n    private graphBody: HTMLElement;\n    private intervalsDropdown: HTMLElement;\n    private header: HTMLElement;\n\n    private yAxisRanges = [];\n\n    constructor(mainGraph: Dygraph, rangeGraph: Dygraph, graphContainer: HTMLElement, graphBody: HTMLElement, intervalsDropdown: HTMLElement, header: HTMLElement, datewindowCallback: any) {\n        this.mainGraph = mainGraph;\n        this.ragnebarGraph = rangeGraph;\n        this.graphContainer = graphContainer;\n        this.datewindowCallback = datewindowCallback;\n        this.graphBody = graphBody;\n        this.intervalsDropdown = intervalsDropdown;\n        this.header = header\n    }\n\n    /**\n     * update labels\n     *\n     * @private\n     * @memberof GraphOperator\n     */\n    private updateCollectionLabels = (header: HTMLElement, entities: Array<Entity>, choosedCollection: GraphCollection, collections: Array<GraphCollection>) => {\n        // \n        let labels = header.getElementsByClassName('fgp-interval-labels');// should only have one.\n        let firstLabelArea: any = null;\n        for (let i = 0; i < labels.length; i++) {\n            const element = labels[i];\n            element.innerHTML = ''; // remove all child\n            if (i == 0) {\n                firstLabelArea = element;\n            }\n        }\n\n        // add children\n        collections.forEach(_collection => {\n            //\n            let labelAttrs: Array<DomAttrs> = [{ key: 'class', value: 'badge badge-pill badge-secondary' }];\n            if (_collection.name == choosedCollection.name) {\n                labelAttrs = [{ key: 'class', value: 'badge badge-pill badge-success' }];\n            }\n            let label: HTMLElement = this.createElement('span', labelAttrs);\n            label.innerText = _collection.label;\n            firstLabelArea.appendChild(label);\n        });\n\n\n    }\n\n\n    private updateSeriesDropdown = (header: HTMLElement, series: Array<any>, graph: Dygraph) => {\n        let dropdown = header.getElementsByClassName('fgp-series-dropdown');// should only have one.\n\n        if (dropdown && dropdown[0]) {\n            dropdown[0].innerHTML = \"\";\n        }\n        let select: HTMLElement = <HTMLSelectElement>this.createElement(\"div\", []);\n        dropdown[0].appendChild(select);\n\n        let opts: Array<{ checked: boolean, name: string, label: string }> = [];\n        series.forEach(_series => {\n\n            opts.push(\n                { checked: true, name: _series, label: _series }\n            );\n        });\n\n        // new SelectWithCheckbox(select, opts).render();\n\n        new DropdownMenu(select, opts, (series, checked) => {\n            let visibility: Array<boolean> = graph.getOption('visibility');\n            let labels: Array<string> = graph.getLabels();\n\n            labels.forEach((label, index) => {\n                if (label == series) {\n                    visibility[index - 1] = checked;\n                }\n            });\n            graph.updateOptions({\n                visibility: visibility\n            });\n\n        }).render();\n    }\n\n\n\n\n    init = (view: ViewConfig, readyCallback?: any, interactionCallback?: any) => {\n        this.currentView = view;\n        let formatters: Formatters = new Formatters(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess());\n        let entities: Array<string> = [];\n        let bottomAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-bottom' }];\n        let bottom = null;\n\n        this.currentView.graphConfig.entities.forEach(entity => {\n            entities.push(entity.id);\n        });\n\n        // find fields from configuration\n        let timewindowEnd: number = moment.tz(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).add(1, 'days').startOf('day').valueOf();\n        let timewindowStart: number = moment.tz(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).subtract(7, 'days').startOf('day').valueOf();   // default 7 days\n        const ranges: Array<{ name: string, value: number, show?: boolean }> = this.currentView.ranges;\n        if (ranges.length > 0) {\n            // get first \"show\" == true\n            const selected = ranges.find((value, index, arr) => {\n                if (value.show) {\n                    return value;\n                }\n            });\n            // not found then use first one\n            if (!selected) {\n                // just need to change start\n                timewindowStart = moment.tz(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).add(1, 'days').startOf('day').valueOf() - ranges[0].value;\n            } else {\n                timewindowStart = moment.tz(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).add(1, 'days').startOf('day').valueOf() - selected.value;\n            }\n        }\n\n        // which one should be shown first? base on current window size? or base on the collection config?\n\n        // get default time range from graph config\n        let graphRangesConfig = this.defaultGraphRanges;\n        if (this.currentView.ranges) {\n            graphRangesConfig = this.currentView.ranges;\n        }\n\n        let dropdownOpts: Array<{ id: string, label: string, selected?: boolean }> = [];\n        graphRangesConfig.forEach(config => {\n            dropdownOpts.push(\n                { id: config.name, label: config.name, selected: config.show }\n            );\n        });\n\n        let choosedCollection: GraphCollection = null;\n\n        const intervalsDropdonwOptions = new DropdownButton(<HTMLSelectElement>this.intervalsDropdown, [...dropdownOpts]);\n        intervalsDropdonwOptions.render();\n\n        this.intervalsDropdown.onchange = (e) => {\n            const intervalDropdown: HTMLSelectElement = <HTMLSelectElement>e.currentTarget;\n            graphRangesConfig.forEach(config => {\n                if (config.name == intervalDropdown.value) {\n                    // if ragnebar graph not exist, ignore it.\n                    if(this.ragnebarGraph){\n                        this.ragnebarGraph.updateOptions({\n                            dateWindow: [new Date(timewindowEnd - config.value), new Date(timewindowEnd)]\n                        });\n                    }\n                    \n                    // find the correct collection and update graph\n                    choosedCollection = this.currentView.graphConfig.collections.find((collection) => {\n                        return collection.threshold && (timewindowEnd - (timewindowEnd - config.value)) <= (collection.threshold.max);\n                    });\n\n                    //update \n                    this.mainGraph = this.mainGraph;\n                    this.ragnebarGraph = this.ragnebarGraph;\n                    this.currentCollection = choosedCollection;\n                    this.currentView = this.currentView;\n                    this.rangeCollection = this.currentView.graphConfig.rangeCollection;\n                    this.start = (timewindowEnd - config.value);\n                    this.end = timewindowEnd;\n\n                    this.update();\n                    this.updateCollectionLabels(this.header, this.currentView.graphConfig.entities, choosedCollection, this.currentView.graphConfig.collections);\n                    if (interactionCallback) {\n                        // ready to update children\n                        interactionCallback();\n                    }\n                }\n            });\n        };\n\n        // get fields\n        let fieldsForCollection = [];\n        // get range config and find the first and last\n        this.currentView.graphConfig.rangeCollection.series.forEach(series => {\n            let _tempFields = (series.exp).match(GraphOperator.FIELD_PATTERN);\n            // replace all \"data.\"\" with \"\"\n            _tempFields = _tempFields.map(exp => exp.replace(\"data.\", \"\"));\n            // put fields together\n            fieldsForCollection = fieldsForCollection.concat(_tempFields);\n        });\n\n\n        // \n        this.currentView.dataService.fetchFirstNLast(entities, this.currentView.graphConfig.rangeCollection.name, Array.from(new Set(fieldsForCollection))).then(resp => {\n            // get first and last records, just need start and end timestamp\n            let first: any = { timestamp: moment.tz(this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).valueOf() };\n            let last: any = { timestamp: 0 };\n            // get all first and last then find out which first is the smalllest and last is the largest\n            entities.forEach(entity => {\n                //\n                resp.forEach(entityData => {\n                    if (entityData.id == entity) {\n                        if (entityData.data && entityData.data.first && entityData.data.first.timestamp) {\n                            //\n                            if (first.timestamp > entityData.data.first.timestamp) {\n                                first = entityData.data.first;\n                            }\n                        }\n\n                        if (entityData.data && entityData.data.last && entityData.data.last.timestamp) {\n                            //\n                            if (last.timestamp < entityData.data.last.timestamp) {\n                                last = entityData.data.last;\n                            }\n                        }\n                    }\n                });\n            });\n\n            // init empty graph with start and end  no other data\n            let firstRanges = graphRangesConfig.find(range => range.show && range.show == true);\n            if (!firstRanges) {\n                // throw errors;\n                throw new Error(\"non default range for range-bar!\");\n            }\n\n            // get fields and labels\n            this.currentView.graphConfig.collections.forEach(collection => {\n                // if there is a config for what level need to show.\n                if (collection.threshold && firstRanges.value) {\n                    //  >= && <    [ in the middle  )\n                    if (firstRanges.value >= collection.threshold.min && firstRanges.value < collection.threshold.max) {\n                        this.currentCollection = choosedCollection = collection;\n\n                    }\n                }\n            });\n\n            // get choosed collection by width....\n            if (!choosedCollection && firstRanges) {\n                // cal with width\n                const width: number = this.graphContainer.offsetWidth;\n                //\n                const pointsCanBeShown: number = Math.round(width * .9);\n                this.currentView.graphConfig.collections.forEach(collection => {\n                    // how many points in this interval\n                    if ((firstRanges.value / collection.interval) <= pointsCanBeShown) {\n                        if (!choosedCollection) {\n                            this.currentCollection = choosedCollection = collection;\n                        } else if (choosedCollection.interval > collection.interval) {\n                            this.currentCollection = choosedCollection = collection;\n                        }\n                    }\n                });\n            }\n\n            let initialData = [[new Date(first.timestamp)], [new Date(last.timestamp)]];\n            let isY2: boolean = false;\n            let mainGraphLabels: Array<string> = [];\n\n\n            if (entities.length == 1) {\n                mainGraphLabels = [];\n                choosedCollection.series.forEach((series, _index) => {\n                    mainGraphLabels.push(series.label);\n                    initialData.forEach(_data => {\n                        _data[_index + 1] = null;\n                    });\n                    if (series.yIndex == \"right\") {\n                        isY2 = true;\n                    }\n                });\n\n            } else if (entities.length > 1 && choosedCollection.series && choosedCollection.series[0]) {\n                mainGraphLabels = [];\n                entities.forEach((entity, _index) => {\n                    mainGraphLabels.push(entity);\n                    initialData.forEach(_data => {\n                        _data[_index + 1] = null;\n                    });\n                });\n            }\n\n            let yScale = null;\n            let y2Scale = null;\n            // check if there is a init scale\n            if (choosedCollection.initScales) {\n                if (choosedCollection.initScales.left) {\n                    yScale = {\n                        valueRange: [choosedCollection.initScales.left.min, choosedCollection.initScales.left.max]\n                    };\n                }\n                if (choosedCollection.initScales.right) {\n                    y2Scale = {\n                        valueRange: [choosedCollection.initScales.right.min, choosedCollection.initScales.right.max]\n                    };\n                }\n\n            }\n            let currentDatewindowOnMouseDown = [];\n\n            const datewindowChangeFunc = (e, yAxisRange?: Array<Array<number>>) => {\n                let datewindow = [];\n\n                if (this.ragnebarGraph) {\n                    datewindow = this.ragnebarGraph.xAxisRange();\n                } else {\n                    datewindow = this.mainGraph.xAxisRange();\n                }\n                // check\n\n                if (datewindow[0] instanceof Date) {\n                    datewindow[0] = datewindow[0].getTime();\n                }\n\n                if (datewindow[1] instanceof Date) {\n                    datewindow[1] = datewindow[1].getTime();\n                }\n\n                if (datewindow[0] == currentDatewindowOnMouseDown[0] && datewindow[1] == currentDatewindowOnMouseDown[1]) {\n                    // console.debug(\"no change!\");\n                } else {\n                    // fetch data again \n                    // sorting\n                    this.currentView.graphConfig.collections.sort((a, b) => {\n                        return a.interval > b.interval ? 1 : -1;\n                    });\n\n                    choosedCollection = this.currentView.graphConfig.collections.find((collection) => {\n                        return collection.threshold && (datewindow[1] - datewindow[0]) <= (collection.threshold.max);\n                    });\n                    let collection: GraphCollection = { label: \"\", name: \"\", series: [], interval: 0, initScales: { left: { min: 0, max: 0 }, right: { min: 0, max: 0 } } };\n                    Object.assign(collection, choosedCollection);\n\n                    if (yAxisRange) {\n                        yAxisRange.forEach((element, _index) => {\n                            if (_index == 0) {\n                                //left\n                                if (!collection.initScales.left) {\n                                    collection.initScales.left = { min: 0, max: 0 };\n                                }\n                                collection.initScales.left.min = element[0];\n                                collection.initScales.left.max = element[1];\n                            } else if (_index == 1) {\n                                if (!collection.initScales.right) {\n                                    collection.initScales.right = { min: 0, max: 0 };\n                                }\n                                collection.initScales.right.min = element[0];\n                                collection.initScales.right.max = element[1];\n                            }\n                        });\n                    }\n                    this.currentCollection = collection;\n                    this.rangeCollection = this.currentView.graphConfig.rangeCollection;\n\n                    this.start = datewindow[0];\n                    this.end = datewindow[1];\n\n                    this.update();\n                    this.updateCollectionLabels(this.header, this.currentView.graphConfig.entities, choosedCollection, this.currentView.graphConfig.collections);\n                }\n            }\n\n            let callbackFuncForInteractions = (e, yAxisRange, refreshData) => {\n                if (refreshData) {\n                    datewindowChangeFunc(e, yAxisRange);\n                } else {\n                    // set initsacle\n                    if (yAxisRange) {\n                        yAxisRange.forEach((element, _index) => {\n                            if (_index == 0) {\n                                //left\n                                if (!this.currentCollection.initScales.left) {\n                                    this.currentCollection.initScales.left = { min: 0, max: 0 };\n                                }\n                                this.currentCollection.initScales.left.min = element[0];\n                                this.currentCollection.initScales.left.max = element[1];\n                            } else if (_index == 1) {\n                                if (!this.currentCollection.initScales.right) {\n                                    this.currentCollection.initScales.right = { min: 0, max: 0 };\n                                }\n                                this.currentCollection.initScales.right.min = element[0];\n                                this.currentCollection.initScales.right.max = element[1];\n                            }\n                        });\n                    }\n\n                }\n\n\n                if (interactionCallback) {\n                    // ready to update children\n                    interactionCallback();\n                }\n            };\n\n\n            let dateLabelLeftAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-range-bar-date-label-left' }];\n            let startLabelLeft: HTMLElement = DomElementOperator.createElement('label', dateLabelLeftAttrs);\n            let dateLabelRightAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-range-bar-date-label-right' }];\n            let endLabelRight: HTMLElement = DomElementOperator.createElement('label', dateLabelRightAttrs);\n\n            // create a interaction model instance\n            let interactionModel: GraphInteractions = new GraphInteractions(callbackFuncForInteractions, [first.timestamp, last.timestamp]);\n            let currentSelection = \"\";\n            this.mainGraph = new Dygraph(this.graphBody, initialData, {\n                labels: ['x'].concat(mainGraphLabels),\n                ylabel: choosedCollection.yLabel,\n                y2label: choosedCollection.y2Label,\n                rangeSelectorHeight: 30,\n                legend: \"follow\",\n                legendFormatter: this.currentView.graphConfig.features.legend ? this.currentView.graphConfig.features.legend : formatters.legendForSingleSeries,\n                labelsKMB: true,\n                axes: {\n                    x: {\n                        axisLabelFormatter: formatters.axisLabel\n                    },\n                    y: yScale,\n                    y2: y2Scale\n                },\n                highlightSeriesOpts: { strokeWidth: 1 },\n                highlightCallback: (e, x, ps, row, seriesName) => {\n                    if (this.currentView.interaction && this.currentView.interaction.callback && this.currentView.interaction.callback.highlighCallback) {\n                        this.currentView.interaction.callback.highlighCallback(x, seriesName, ps);\n                    }\n                    currentSelection = seriesName;\n                },\n                clickCallback: (e, x, points) => {\n                    if (this.currentView.interaction && this.currentView.interaction.callback && this.currentView.interaction.callback.selectCallback) {\n                        this.currentView.interaction.callback.selectCallback(currentSelection);\n                    }\n                },\n                interactionModel: {\n                    'mousedown': interactionModel.mouseDown,\n                    'mouseup': interactionModel.mouseUp,\n                    'mousemove': interactionModel.mouseMove,\n                    'mousewheel': interactionModel.mouseScroll,\n                    'DOMMouseScroll': interactionModel.mouseScroll,\n                    'wheel': interactionModel.mouseScroll,\n                    'mouseenter': interactionModel.mouseEnter,\n                },\n                drawCallback: (dygraph, is_initial) => {\n                    const xAxisRange: Array<number> = dygraph.xAxisRange();\n                    if (this.currentView.graphConfig.features.rangeBar && this.currentView.graphConfig.rangeCollection) {\n                        startLabelLeft.innerHTML = moment.tz(xAxisRange[0], this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).format('lll z');\n                        endLabelRight.innerHTML = moment.tz(xAxisRange[1], this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).format('lll z');\n                    }\n                    // update datewindow\n                    this.datewindowCallback(xAxisRange);\n                }\n            });\n\n            // remove first\n            if (this.graphContainer.getElementsByClassName(\"fgp-graph-bottom\").length > 0) {\n                let bottoms = this.graphContainer.getElementsByClassName(\"fgp-graph-bottom\");\n                for (var i = 0; i < bottoms.length; i++) {\n                    this.graphContainer.removeChild(bottoms[i]);\n                }\n            }\n            // range-bar?\n            if (this.currentView.graphConfig.features.rangeBar && this.currentView.graphConfig.rangeCollection) {\n                let labels: Array<string> = [];\n                let firstData = [new Date(first.timestamp)];\n                let lastData = [new Date(last.timestamp)];\n                let rangeSeries = null;\n                this.rangeCollection = this.currentView.graphConfig.rangeCollection;\n                // range device always one\n                rangeSeries = {};\n                // check if ther is a y2\n                this.currentView.graphConfig.rangeCollection.series.forEach((series, _index) => {\n                    labels.push(series.label);\n                    firstData[_index + 1] = null;\n                    lastData[_index + 1] = null;\n                    rangeSeries[series.label] = {\n                        axis: (series.yIndex == \"left\" || !series.yIndex) ? 'y' : 'y2'\n                    };\n                });\n\n                if (isY2) {\n                    labels.push(\"y2\");\n                    rangeSeries[\"y2\"] = {\n                        axis: \"y2\"\n                    };\n                    firstData.push(null);\n                    lastData.push(null);\n                }\n\n                // create 2 labels for start and end\n\n                let dateLabels: HTMLElement = DomElementOperator.createElement('div', [{ key: 'style', value: 'height:22px;' }]);\n                dateLabels.appendChild(startLabelLeft);\n                dateLabels.appendChild(endLabelRight);\n                bottom = DomElementOperator.createElement('div', bottomAttrs);\n                bottom.appendChild(dateLabels);\n                let rangeBarAttrs: Array<DomAttrs> = [{ key: 'class', value: 'fgp-graph-rangebar' }];\n                let rangeBar: HTMLElement = DomElementOperator.createElement('div', rangeBarAttrs);\n                bottom.appendChild(rangeBar);\n                this.graphContainer.appendChild(bottom);\n                //create range-bar graph\n                this.ragnebarGraph = new Dygraph(rangeBar, [\n                    firstData,   // first\n                    lastData    // last\n                ], {\n                        xAxisHeight: 0,\n                        axes: {\n                            x: { drawAxis: false },\n                            y: {\n                                axisLabelWidth: 60\n                            },\n                            y2: {\n                                axisLabelWidth: 60\n                            }\n                        },\n                        labels: ['x'].concat(labels),\n                        // series: rangeSeries,\n                        showRangeSelector: true,\n                        rangeSelectorHeight: 30,\n                        legend: 'never',\n                        drawCallback: (dygraph, is_initial) => {\n                            const xAxisRange: Array<number> = dygraph.xAxisRange();\n                            startLabelLeft.innerHTML = moment.tz(xAxisRange[0], this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).format('lll z');\n                            endLabelRight.innerHTML = moment.tz(xAxisRange[1], this.currentView.timezone ? this.currentView.timezone : moment.tz.guess()).format('lll z');\n                            this.datewindowCallback(xAxisRange);\n                        }\n                    });\n\n                // check \n                let sync = new Synchronizer([this.ragnebarGraph, this.mainGraph]);\n                sync.synchronize();\n                // readyCallback(this.mainGraph);\n                let rangeBarCanvas = (rangeBar.getElementsByClassName(\"dygraph-rangesel-fgcanvas\")[0]);\n                let rangeBarHandles = rangeBar.getElementsByClassName(\"dygraph-rangesel-zoomhandle\");\n                const rangebarMousedownFunc = (e) => {\n                    // check\n                    const datewindow = this.ragnebarGraph.xAxisRange();\n                    if (datewindow[0] instanceof Date) {\n                        datewindow[0] = datewindow[0].getTime();\n                    }\n\n                    if (datewindow[1] instanceof Date) {\n                        datewindow[1] = datewindow[1].getTime();\n                    }\n                    currentDatewindowOnMouseDown = datewindow;\n\n\n                    window.addEventListener(\"mouseup\", (e) => {\n                        datewindowChangeFunc(e, null);\n\n                        if (interactionCallback) {\n                            // ready to update children\n                            interactionCallback();\n                        }\n                    }, { once: true });\n                }\n\n\n                for (let i = 0; i < rangeBarHandles.length; i++) {\n                    const element = rangeBarHandles[i];\n                    let style = element.getAttribute(\"style\");\n                    style.replace(\"z-index: 10;\", \"z-index: \" + (10 + i) + \";\");\n                    element.setAttribute(\"style\", style);\n                    element.addEventListener('mousedown', rangebarMousedownFunc);\n                }\n\n                // add mouse listener \n                rangeBarCanvas.addEventListener('mousedown', rangebarMousedownFunc);\n            } else {\n                \n            }\n            // update datewindow\n            this.mainGraph.updateOptions({\n                dateWindow: [new Date(timewindowStart), new Date(timewindowEnd)]\n            });\n\n            this.start = timewindowStart;\n            this.end = timewindowEnd;\n        \n            this.update(first.timestamp, last.timestamp);\n            // send \"ready\" after update \n            readyCallback(this.mainGraph);\n            this.updateCollectionLabels(this.header, this.currentView.graphConfig.entities, choosedCollection, this.currentView.graphConfig.collections);\n            const seriesName = [];\n            if (this.currentView.graphConfig.entities.length > 1) {\n                this.currentView.graphConfig.entities.forEach(entity => {\n                    seriesName.push(entity.name);\n                });\n            } else {\n                // single device with multiple lines\n                choosedCollection.series.forEach(series => {\n                    seriesName.push(series.label);\n                });\n            }\n\n            this.updateSeriesDropdown(this.header, seriesName, this.mainGraph);\n\n        });\n    }\n\n\n    refresh = () => {\n        const xAxisRange: Array<number> = this.mainGraph.xAxisRange();\n\n        let datewindow = [];\n\n        if (xAxisRange) {\n            datewindow[0] = xAxisRange[0];\n            datewindow[1] = xAxisRange[1];\n        }\n\n        // get correct collection then call update\n        if (datewindow[0] == this.start && datewindow[1] == this.end) {\n            // console.debug(\"no change!\");\n        } else {\n            this.start = datewindow[0];\n            this.end = datewindow[1];\n\n            this.currentView.graphConfig.collections.sort((a, b) => {\n                return a.interval > b.interval ? 1 : -1;\n            });\n\n            this.currentCollection = this.currentView.graphConfig.collections.find((collection) => {\n                return collection.threshold && (datewindow[1] - datewindow[0]) <= (collection.threshold.max);\n            });\n            let collection: GraphCollection = { label: \"\", name: \"\", series: [], interval: 0, initScales: { left: { min: 0, max: 0 }, right: { min: 0, max: 0 } } };\n            Object.assign(collection, this.currentCollection);\n            // check initScale\n\n\n\n            this.update();\n            this.updateCollectionLabels(this.header, this.currentView.graphConfig.entities, this.currentCollection, this.currentView.graphConfig.collections);\n        }\n\n\n    }\n\n\n    update = (first?: number, last?: number) => {\n        let mainGraph = this.mainGraph;\n        let rangebarGraph = this.ragnebarGraph;\n        let graphCollection = this.currentCollection;\n        let rangeCollection = this.rangeCollection;\n        let start = this.start;\n        let end = this.end;\n\n        let view = this.currentView;\n\n        let formatters: Formatters = new Formatters(view.timezone ? view.timezone : moment.tz.guess());\n        let mainGraphColors: Array<string> = [];\n        // get data for main graph\n        // main graph entities\n        const mainEntities: Array<string> = [];\n        view.graphConfig.entities.forEach(entity => {\n            mainEntities.push(entity.id);\n        });\n\n        // get fields for main graph\n        let fieldsForMainGraph = [];\n        let yAxis = { min: null, max: null };\n        let yAxis2 = { min: null, max: null };\n        let yIndexs: Array<number> = [];\n        let y2Indexs: Array<number> = [];\n        let colors: Array<string> = [];\n        let mainGraphSeries = {};\n        let isY2: boolean = false;\n        graphCollection.series.forEach((series, _index) => {\n            let _tempFields = (series.exp).match(GraphOperator.FIELD_PATTERN);\n            // replace all \"data.\"\" with \"\"\n            _tempFields = _tempFields.map(exp => exp.replace(\"data.\", \"\"));\n            // put fields together\n            fieldsForMainGraph = fieldsForMainGraph.concat(_tempFields);\n\n            if (view.graphConfig.entities.length == 1 && series.color) {\n                colors.push(series.color);\n            }\n\n            if (series.yIndex && series.yIndex == 'right') {\n                // right\n                y2Indexs.push(_index + 1);\n            } else if (!series.yIndex || series.yIndex == 'left') {\n                // left\n                yIndexs.push(_index + 1);\n            }\n\n            mainGraphSeries[series.label] = {\n                axis: series.yIndex == 'left' ? 'y' : 'y2',\n                color: series.color,\n                highlightCircleSize: 4\n            };\n\n            if (series.type == 'dots') {\n                mainGraphSeries[series.label][\"strokeWidth\"] = 0;\n                mainGraphSeries[series.label][\"drawPoints\"] = true;\n            }\n\n            if (series.yIndex != 'left') {\n                isY2 = true;\n            }\n\n        });\n\n\n        let prepareGraphData = (data, entities, collection): { data: Array<any>, axis?: { y: { min: number, max: number }, y2?: { min: number, max: number } } } => {\n            // update main graph\n            let graphData = [];\n            let finalData = [];\n            let _dates: Array<number> = [];\n            if (first && last) {\n                _dates = [first, last];\n            }\n            data.forEach(entityData => {\n                entities.forEach(id => {\n                    if (id == entityData.id) {\n                        graphData.push(entityData.data);\n                        // merge date \n                        entityData.data.forEach(item => {  // item is object\n                            if (_dates.indexOf(item.timestamp) == -1) {\n                                _dates.push(item.timestamp);\n                            }\n                        });\n                    }\n                });\n            });\n            // \n            _dates.sort();\n            if (entities.length == 1) {\n                // get collection config\n                collection.series.forEach((series, _index) => {\n                    var f = new Function(\"data\", \"with(data) { if(\" + series.exp + \"!=null)return \" + series.exp + \";return null;}\");\n                    // generate data for this column\n                    _dates.forEach(date => {\n                        // find date in finalData\n                        let point = finalData.find(record => record[0].getTime() == date);\n                        let record = graphData[0].find(data => data.timestamp == date);\n\n                        if (point) {\n                            point[_index + 1] = record ? f(record) : null;\n                        } else {\n                            point = [new Date(date)];\n                            point[_index + 1] = record ? f(record) : null;\n                            finalData.push(point);\n                        }\n\n                        // update min max for current field\n                        // left \n                        yIndexs.forEach(_yIndex => {\n                            if (_yIndex == (_index + 1)) {\n                                //\n                                if (yAxis.min) {\n                                    // compare and put the value\n                                    yAxis.min = yAxis.min > point[_index + 1] ? point[_index + 1] : yAxis.min;\n                                } else {\n                                    yAxis.min = point[_index + 1];\n                                }\n\n                                if (yAxis.max) {\n                                    // compare and put the value\n                                    yAxis.max = yAxis.max < point[_index + 1] ? point[_index + 1] : yAxis.max;\n                                } else {\n                                    yAxis.max = point[_index + 1];\n                                }\n                            }\n                        });\n\n                        // right \n                        y2Indexs.forEach(_yIndex => {\n                            if (_yIndex == (_index + 1)) {\n                                //\n                                if (yAxis2.min) {\n                                    // compare and put the value\n                                    yAxis2.min = yAxis2.min > point[_index + 1] ? point[_index + 1] : yAxis2.min;\n                                } else {\n                                    yAxis2.min = point[_index + 1];\n                                }\n\n                                if (yAxis2.max) {\n                                    // compare and put the value\n                                    yAxis2.max = yAxis2.max < point[_index + 1] ? point[_index + 1] : yAxis2.max;\n                                } else {\n                                    yAxis2.max = point[_index + 1];\n                                }\n                            }\n                        });\n                    });\n                });\n            } else if (entities.length > 1 && collection.series && collection.series[0]) {\n                const exp = collection.series[0].exp;\n                var f = new Function(\"data\", \"with(data) { if(\" + exp + \"!=null)return \" + exp + \";return null;}\");\n                _dates.forEach(date => {\n                    // get the record\n                    let point = finalData.find(record => record[0].getTime() == date);\n                    // if not found just add it as new one.\n                    if (!point) {\n                        point = [new Date(date)];\n                        finalData.push(point);\n                    }\n\n                    entities.forEach((entity, _index) => {\n                        let record = graphData[_index].find(data => data.timestamp == date);\n                        point[_index + 1] = record ? f(record) : null;\n\n                        yIndexs.forEach(_yIndex => {\n                            if (_yIndex == (_index + 1)) {\n                                //\n                                if (yAxis.min) {\n                                    // compare and put the value\n                                    yAxis.min = yAxis.min > point[_index + 1] ? point[_index + 1] : yAxis.min;\n                                } else {\n                                    yAxis.min = point[_index + 1];\n                                }\n\n                                if (yAxis.max) {\n                                    // compare and put the value\n                                    yAxis.max = yAxis.max < point[_index + 1] ? point[_index + 1] : yAxis.max;\n                                } else {\n                                    yAxis.max = point[_index + 1];\n                                }\n                            }\n                        });\n\n                        // right \n                        y2Indexs.forEach(_yIndex => {\n                            if (_yIndex == (_index + 1)) {\n                                //\n                                if (yAxis2.min) {\n                                    // compare and put the value\n                                    yAxis2.min = yAxis2.min > point[_index + 1] ? point[_index + 1] : yAxis2.min;\n                                } else {\n                                    yAxis2.min = point[_index + 1];\n                                }\n\n                                if (yAxis2.max) {\n                                    // compare and put the value\n                                    yAxis2.max = yAxis2.max < point[_index + 1] ? point[_index + 1] : yAxis2.max;\n                                } else {\n                                    yAxis2.max = point[_index + 1];\n                                }\n                            }\n                        });\n\n                    });\n                });\n            }\n\n            return { data: finalData, axis: { y: yAxis, y2: yAxis2 } };\n        }\n\n        // get data for \n        view.dataService.fetchdata(mainEntities, graphCollection.name, { start: start, end: end }, Array.from(new Set(fieldsForMainGraph))).then(resp => {\n\n            let graphData = prepareGraphData(resp, mainEntities, graphCollection);\n            let yScale: { valueRange: Array<number> } = { valueRange: [] };\n            let y2Scale: { valueRange: Array<number> } = { valueRange: [] };\n            // get init scale\n            if (!graphCollection.initScales) {\n                if (graphData.axis) {\n                    if (graphData.axis.y) {\n                        yScale.valueRange = [graphData.axis.y.min * 0.97, graphData.axis.y.max * 1.03];\n                    }\n\n                    if (graphData.axis.y2) {\n                        y2Scale.valueRange = [graphData.axis.y2.min * 0.97, graphData.axis.y2.max * 1.03];\n                    }\n                }\n            } else {\n                // check if there is a init scale\n                if (graphCollection.initScales.left) {\n                    yScale.valueRange = [graphCollection.initScales.left.min, graphCollection.initScales.left.max];\n\n                }\n                if (graphCollection.initScales.right) {\n                    y2Scale.valueRange = [graphCollection.initScales.right.min, graphCollection.initScales.right.max]\n                }\n            }\n            // clear old graph\n            mainGraph.hidden_ctx_.clearRect(0, 0, mainGraph.hidden_.width, mainGraph.hidden_.height);\n            // update main graph\n            mainGraph.updateOptions({\n                file: graphData.data,\n                series: mainGraphSeries,\n                fillGraph: graphCollection.fill ? graphCollection.fill : false,\n                highlightSeriesOpts: {\n                    strokeWidth: 1.5\n                },\n                axes: {\n                    x: {\n                        axisLabelFormatter: formatters.axisLabel\n                    },\n                    y: {\n                        valueRange: yScale.valueRange,\n                        axisLabelWidth: 60,\n                        labelsKMB: true\n                    },\n                    y2: {\n                        valueRange: y2Scale.valueRange,\n                        axisLabelWidth: 60,\n                        labelsKMB: true\n                    }\n                }\n            });\n\n        });\n\n\n        if (view.graphConfig.features.rangeBar) {\n            // get fields for range-bar \n            const rangeEntities: Array<string> = [view.graphConfig.rangeEntity.id];\n            // get fields for main graph\n            let fieldsForRangebarGraph = [];\n\n            rangeCollection.series.forEach(series => {\n                let _tempFields = (series.exp).match(GraphOperator.FIELD_PATTERN);\n                // replace all \"data.\"\" with \"\"\n                _tempFields = _tempFields.map(exp => exp.replace(\"data.\", \"\"));\n                // put fields together\n                fieldsForRangebarGraph = fieldsForRangebarGraph.concat(_tempFields);\n            });\n\n            // for range\n            view.dataService.fetchdata(rangeEntities, rangeCollection.name, { start: start, end: end }, Array.from(new Set(fieldsForRangebarGraph))).then(resp => {\n\n                // merge data\n                const currentDatewindowData = prepareGraphData(resp, rangeEntities, rangeCollection);\n                let preData: Array<any> = rangebarGraph.file_;\n                currentDatewindowData.data.forEach(_data => {\n                    let _exist: number = -1;\n                    preData.forEach((_oldData, _index) => {\n                        if (_oldData[0].getTime() == _data[0].getTime()) {\n                            _exist = _index;\n                        }\n                    });\n                    if (_exist != -1) {\n                        // replace\n                        preData.splice(_exist, 1, _data);\n                    } else {\n                        // add data before the last one\n                        preData.push(_data);\n                    }\n                });\n                // sorting\n                preData.sort((a, b) => {\n                    return a[0].getTime() > b[0].getTime() ? 1 : -1;\n                });\n\n                let rangeSeries = {};\n                let labels = [];\n                // check if ther is a y2\n                rangeCollection.series.forEach((series, _index) => {\n                    labels.push(series.label);\n                    rangeSeries[series.label] = {\n                        axis: (series.yIndex == \"left\" || !series.yIndex) ? 'y' : 'y2'\n                    };\n                });\n\n                if (isY2) {\n                    labels.push(\"y2\");\n                    rangeSeries[\"y2\"] = {\n                        axis: \"y2\"\n                    };\n\n                    preData.forEach(_data => {\n                        if (_data.length == 2) {\n                            _data.push(null);\n                        }\n                    });\n                } else {\n                    preData.forEach(_data => {\n                        if (_data.length > 2) {\n                            _data.splice(2, _data.length - 2);\n                        }\n                    });\n                }\n                rangebarGraph.updateOptions({\n                    file: preData,\n                    series: rangeSeries,\n                    labels: ['x'].concat(labels)\n                });\n            });\n        }\n\n    }\n\n}\n","//! moment-timezone.js\n//! version : 0.5.26\n//! Copyright (c) JS Foundation and other contributors\n//! license : MIT\n//! github.com/moment/moment-timezone\n\n(function (root, factory) {\n\t\"use strict\";\n\n\t/*global define*/\n\tif (typeof module === 'object' && module.exports) {\n\t\tmodule.exports = factory(require('moment')); // Node\n\t} else if (typeof define === 'function' && define.amd) {\n\t\tdefine(['moment'], factory);                 // AMD\n\t} else {\n\t\tfactory(root.moment);                        // Browser\n\t}\n}(this, function (moment) {\n\t\"use strict\";\n\n\t// Do not load moment-timezone a second time.\n\t// if (moment.tz !== undefined) {\n\t// \tlogError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);\n\t// \treturn moment;\n\t// }\n\n\tvar VERSION = \"0.5.26\",\n\t\tzones = {},\n\t\tlinks = {},\n\t\tnames = {},\n\t\tguesses = {},\n\t\tcachedGuess;\n\n\tif (!moment || typeof moment.version !== 'string') {\n\t\tlogError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');\n\t}\n\n\tvar momentVersion = moment.version.split('.'),\n\t\tmajor = +momentVersion[0],\n\t\tminor = +momentVersion[1];\n\n\t// Moment.js version check\n\tif (major < 2 || (major === 2 && minor < 6)) {\n\t\tlogError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');\n\t}\n\n\t/************************************\n\t\tUnpacking\n\t************************************/\n\n\tfunction charCodeToInt(charCode) {\n\t\tif (charCode > 96) {\n\t\t\treturn charCode - 87;\n\t\t} else if (charCode > 64) {\n\t\t\treturn charCode - 29;\n\t\t}\n\t\treturn charCode - 48;\n\t}\n\n\tfunction unpackBase60(string) {\n\t\tvar i = 0,\n\t\t\tparts = string.split('.'),\n\t\t\twhole = parts[0],\n\t\t\tfractional = parts[1] || '',\n\t\t\tmultiplier = 1,\n\t\t\tnum,\n\t\t\tout = 0,\n\t\t\tsign = 1;\n\n\t\t// handle negative numbers\n\t\tif (string.charCodeAt(0) === 45) {\n\t\t\ti = 1;\n\t\t\tsign = -1;\n\t\t}\n\n\t\t// handle digits before the decimal\n\t\tfor (i; i < whole.length; i++) {\n\t\t\tnum = charCodeToInt(whole.charCodeAt(i));\n\t\t\tout = 60 * out + num;\n\t\t}\n\n\t\t// handle digits after the decimal\n\t\tfor (i = 0; i < fractional.length; i++) {\n\t\t\tmultiplier = multiplier / 60;\n\t\t\tnum = charCodeToInt(fractional.charCodeAt(i));\n\t\t\tout += num * multiplier;\n\t\t}\n\n\t\treturn out * sign;\n\t}\n\n\tfunction arrayToInt (array) {\n\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\tarray[i] = unpackBase60(array[i]);\n\t\t}\n\t}\n\n\tfunction intToUntil (array, length) {\n\t\tfor (var i = 0; i < length; i++) {\n\t\t\tarray[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds\n\t\t}\n\n\t\tarray[length - 1] = Infinity;\n\t}\n\n\tfunction mapIndices (source, indices) {\n\t\tvar out = [], i;\n\n\t\tfor (i = 0; i < indices.length; i++) {\n\t\t\tout[i] = source[indices[i]];\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction unpack (string) {\n\t\tvar data = string.split('|'),\n\t\t\toffsets = data[2].split(' '),\n\t\t\tindices = data[3].split(''),\n\t\t\tuntils  = data[4].split(' ');\n\n\t\tarrayToInt(offsets);\n\t\tarrayToInt(indices);\n\t\tarrayToInt(untils);\n\n\t\tintToUntil(untils, indices.length);\n\n\t\treturn {\n\t\t\tname       : data[0],\n\t\t\tabbrs      : mapIndices(data[1].split(' '), indices),\n\t\t\toffsets    : mapIndices(offsets, indices),\n\t\t\tuntils     : untils,\n\t\t\tpopulation : data[5] | 0\n\t\t};\n\t}\n\n\t/************************************\n\t\tZone object\n\t************************************/\n\n\tfunction Zone (packedString) {\n\t\tif (packedString) {\n\t\t\tthis._set(unpack(packedString));\n\t\t}\n\t}\n\n\tZone.prototype = {\n\t\t_set : function (unpacked) {\n\t\t\tthis.name       = unpacked.name;\n\t\t\tthis.abbrs      = unpacked.abbrs;\n\t\t\tthis.untils     = unpacked.untils;\n\t\t\tthis.offsets    = unpacked.offsets;\n\t\t\tthis.population = unpacked.population;\n\t\t},\n\n\t\t_index : function (timestamp) {\n\t\t\tvar target = +timestamp,\n\t\t\t\tuntils = this.untils,\n\t\t\t\ti;\n\n\t\t\tfor (i = 0; i < untils.length; i++) {\n\t\t\t\tif (target < untils[i]) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tparse : function (timestamp) {\n\t\t\tvar target  = +timestamp,\n\t\t\t\toffsets = this.offsets,\n\t\t\t\tuntils  = this.untils,\n\t\t\t\tmax     = untils.length - 1,\n\t\t\t\toffset, offsetNext, offsetPrev, i;\n\n\t\t\tfor (i = 0; i < max; i++) {\n\t\t\t\toffset     = offsets[i];\n\t\t\t\toffsetNext = offsets[i + 1];\n\t\t\t\toffsetPrev = offsets[i ? i - 1 : i];\n\n\t\t\t\tif (offset < offsetNext && tz.moveAmbiguousForward) {\n\t\t\t\t\toffset = offsetNext;\n\t\t\t\t} else if (offset > offsetPrev && tz.moveInvalidForward) {\n\t\t\t\t\toffset = offsetPrev;\n\t\t\t\t}\n\n\t\t\t\tif (target < untils[i] - (offset * 60000)) {\n\t\t\t\t\treturn offsets[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn offsets[max];\n\t\t},\n\n\t\tabbr : function (mom) {\n\t\t\treturn this.abbrs[this._index(mom)];\n\t\t},\n\n\t\toffset : function (mom) {\n\t\t\tlogError(\"zone.offset has been deprecated in favor of zone.utcOffset\");\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t},\n\n\t\tutcOffset : function (mom) {\n\t\t\treturn this.offsets[this._index(mom)];\n\t\t}\n\t};\n\n\t/************************************\n\t\tCurrent Timezone\n\t************************************/\n\n\tfunction OffsetAt(at) {\n\t\tvar timeString = at.toTimeString();\n\t\tvar abbr = timeString.match(/\\([a-z ]+\\)/i);\n\t\tif (abbr && abbr[0]) {\n\t\t\t// 17:56:31 GMT-0600 (CST)\n\t\t\t// 17:56:31 GMT-0600 (Central Standard Time)\n\t\t\tabbr = abbr[0].match(/[A-Z]/g);\n\t\t\tabbr = abbr ? abbr.join('') : undefined;\n\t\t} else {\n\t\t\t// 17:56:31 CST\n\t\t\t// 17:56:31 GMT+0800 (台北標準時間)\n\t\t\tabbr = timeString.match(/[A-Z]{3,5}/g);\n\t\t\tabbr = abbr ? abbr[0] : undefined;\n\t\t}\n\n\t\tif (abbr === 'GMT') {\n\t\t\tabbr = undefined;\n\t\t}\n\n\t\tthis.at = +at;\n\t\tthis.abbr = abbr;\n\t\tthis.offset = at.getTimezoneOffset();\n\t}\n\n\tfunction ZoneScore(zone) {\n\t\tthis.zone = zone;\n\t\tthis.offsetScore = 0;\n\t\tthis.abbrScore = 0;\n\t}\n\n\tZoneScore.prototype.scoreOffsetAt = function (offsetAt) {\n\t\tthis.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);\n\t\tif (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {\n\t\t\tthis.abbrScore++;\n\t\t}\n\t};\n\n\tfunction findChange(low, high) {\n\t\tvar mid, diff;\n\n\t\twhile ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {\n\t\t\tmid = new OffsetAt(new Date(low.at + diff));\n\t\t\tif (mid.offset === low.offset) {\n\t\t\t\tlow = mid;\n\t\t\t} else {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\tfunction userOffsets() {\n\t\tvar startYear = new Date().getFullYear() - 2,\n\t\t\tlast = new OffsetAt(new Date(startYear, 0, 1)),\n\t\t\toffsets = [last],\n\t\t\tchange, next, i;\n\n\t\tfor (i = 1; i < 48; i++) {\n\t\t\tnext = new OffsetAt(new Date(startYear, i, 1));\n\t\t\tif (next.offset !== last.offset) {\n\t\t\t\tchange = findChange(last, next);\n\t\t\t\toffsets.push(change);\n\t\t\t\toffsets.push(new OffsetAt(new Date(change.at + 6e4)));\n\t\t\t}\n\t\t\tlast = next;\n\t\t}\n\n\t\tfor (i = 0; i < 4; i++) {\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));\n\t\t\toffsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));\n\t\t}\n\n\t\treturn offsets;\n\t}\n\n\tfunction sortZoneScores (a, b) {\n\t\tif (a.offsetScore !== b.offsetScore) {\n\t\t\treturn a.offsetScore - b.offsetScore;\n\t\t}\n\t\tif (a.abbrScore !== b.abbrScore) {\n\t\t\treturn a.abbrScore - b.abbrScore;\n\t\t}\n\t\tif (a.zone.population !== b.zone.population) {\n\t\t\treturn b.zone.population - a.zone.population;\n\t\t}\n\t\treturn b.zone.name.localeCompare(a.zone.name);\n\t}\n\n\tfunction addToGuesses (name, offsets) {\n\t\tvar i, offset;\n\t\tarrayToInt(offsets);\n\t\tfor (i = 0; i < offsets.length; i++) {\n\t\t\toffset = offsets[i];\n\t\t\tguesses[offset] = guesses[offset] || {};\n\t\t\tguesses[offset][name] = true;\n\t\t}\n\t}\n\n\tfunction guessesForUserOffsets (offsets) {\n\t\tvar offsetsLength = offsets.length,\n\t\t\tfilteredGuesses = {},\n\t\t\tout = [],\n\t\t\ti, j, guessesOffset;\n\n\t\tfor (i = 0; i < offsetsLength; i++) {\n\t\t\tguessesOffset = guesses[offsets[i].offset] || {};\n\t\t\tfor (j in guessesOffset) {\n\t\t\t\tif (guessesOffset.hasOwnProperty(j)) {\n\t\t\t\t\tfilteredGuesses[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (i in filteredGuesses) {\n\t\t\tif (filteredGuesses.hasOwnProperty(i)) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out;\n\t}\n\n\tfunction rebuildGuess () {\n\n\t\t// use Intl API when available and returning valid time zone\n\t\ttry {\n\t\t\tvar intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\t\t\tif (intlName && intlName.length > 3) {\n\t\t\t\tvar name = names[normalizeName(intlName)];\n\t\t\t\tif (name) {\n\t\t\t\t\treturn name;\n\t\t\t\t}\n\t\t\t\tlogError(\"Moment Timezone found \" + intlName + \" from the Intl api, but did not have that data loaded.\");\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// Intl unavailable, fall back to manual guessing.\n\t\t}\n\n\t\tvar offsets = userOffsets(),\n\t\t\toffsetsLength = offsets.length,\n\t\t\tguesses = guessesForUserOffsets(offsets),\n\t\t\tzoneScores = [],\n\t\t\tzoneScore, i, j;\n\n\t\tfor (i = 0; i < guesses.length; i++) {\n\t\t\tzoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);\n\t\t\tfor (j = 0; j < offsetsLength; j++) {\n\t\t\t\tzoneScore.scoreOffsetAt(offsets[j]);\n\t\t\t}\n\t\t\tzoneScores.push(zoneScore);\n\t\t}\n\n\t\tzoneScores.sort(sortZoneScores);\n\n\t\treturn zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;\n\t}\n\n\tfunction guess (ignoreCache) {\n\t\tif (!cachedGuess || ignoreCache) {\n\t\t\tcachedGuess = rebuildGuess();\n\t\t}\n\t\treturn cachedGuess;\n\t}\n\n\t/************************************\n\t\tGlobal Methods\n\t************************************/\n\n\tfunction normalizeName (name) {\n\t\treturn (name || '').toLowerCase().replace(/\\//g, '_');\n\t}\n\n\tfunction addZone (packed) {\n\t\tvar i, name, split, normalized;\n\n\t\tif (typeof packed === \"string\") {\n\t\t\tpacked = [packed];\n\t\t}\n\n\t\tfor (i = 0; i < packed.length; i++) {\n\t\t\tsplit = packed[i].split('|');\n\t\t\tname = split[0];\n\t\t\tnormalized = normalizeName(name);\n\t\t\tzones[normalized] = packed[i];\n\t\t\tnames[normalized] = name;\n\t\t\taddToGuesses(normalized, split[2].split(' '));\n\t\t}\n\t}\n\n\tfunction getZone (name, caller) {\n\n\t\tname = normalizeName(name);\n\n\t\tvar zone = zones[name];\n\t\tvar link;\n\n\t\tif (zone instanceof Zone) {\n\t\t\treturn zone;\n\t\t}\n\n\t\tif (typeof zone === 'string') {\n\t\t\tzone = new Zone(zone);\n\t\t\tzones[name] = zone;\n\t\t\treturn zone;\n\t\t}\n\n\t\t// Pass getZone to prevent recursion more than 1 level deep\n\t\tif (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {\n\t\t\tzone = zones[name] = new Zone();\n\t\t\tzone._set(link);\n\t\t\tzone.name = names[name];\n\t\t\treturn zone;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tfunction getNames () {\n\t\tvar i, out = [];\n\n\t\tfor (i in names) {\n\t\t\tif (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {\n\t\t\t\tout.push(names[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn out.sort();\n\t}\n\n\tfunction addLink (aliases) {\n\t\tvar i, alias, normal0, normal1;\n\n\t\tif (typeof aliases === \"string\") {\n\t\t\taliases = [aliases];\n\t\t}\n\n\t\tfor (i = 0; i < aliases.length; i++) {\n\t\t\talias = aliases[i].split('|');\n\n\t\t\tnormal0 = normalizeName(alias[0]);\n\t\t\tnormal1 = normalizeName(alias[1]);\n\n\t\t\tlinks[normal0] = normal1;\n\t\t\tnames[normal0] = alias[0];\n\n\t\t\tlinks[normal1] = normal0;\n\t\t\tnames[normal1] = alias[1];\n\t\t}\n\t}\n\n\tfunction loadData (data) {\n\t\taddZone(data.zones);\n\t\taddLink(data.links);\n\t\ttz.dataVersion = data.version;\n\t}\n\n\tfunction zoneExists (name) {\n\t\tif (!zoneExists.didShowError) {\n\t\t\tzoneExists.didShowError = true;\n\t\t\t\tlogError(\"moment.tz.zoneExists('\" + name + \"') has been deprecated in favor of !moment.tz.zone('\" + name + \"')\");\n\t\t}\n\t\treturn !!getZone(name);\n\t}\n\n\tfunction needsOffset (m) {\n\t\tvar isUnixTimestamp = (m._f === 'X' || m._f === 'x');\n\t\treturn !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);\n\t}\n\n\tfunction logError (message) {\n\t\tif (typeof console !== 'undefined' && typeof console.error === 'function') {\n\t\t\tconsole.error(message);\n\t\t}\n\t}\n\n\t/************************************\n\t\tmoment.tz namespace\n\t************************************/\n\n\tfunction tz (input) {\n\t\tvar args = Array.prototype.slice.call(arguments, 0, -1),\n\t\t\tname = arguments[arguments.length - 1],\n\t\t\tzone = getZone(name),\n\t\t\tout  = moment.utc.apply(null, args);\n\n\t\tif (zone && !moment.isMoment(input) && needsOffset(out)) {\n\t\t\tout.add(zone.parse(out), 'minutes');\n\t\t}\n\n\t\tout.tz(name);\n\n\t\treturn out;\n\t}\n\n\ttz.version      = VERSION;\n\ttz.dataVersion  = '';\n\ttz._zones       = zones;\n\ttz._links       = links;\n\ttz._names       = names;\n\ttz.add          = addZone;\n\ttz.link         = addLink;\n\ttz.load         = loadData;\n\ttz.zone         = getZone;\n\ttz.zoneExists   = zoneExists; // deprecated in 0.1.0\n\ttz.guess        = guess;\n\ttz.names        = getNames;\n\ttz.Zone         = Zone;\n\ttz.unpack       = unpack;\n\ttz.unpackBase60 = unpackBase60;\n\ttz.needsOffset  = needsOffset;\n\ttz.moveInvalidForward   = true;\n\ttz.moveAmbiguousForward = false;\n\n\t/************************************\n\t\tInterface with Moment.js\n\t************************************/\n\n\tvar fn = moment.fn;\n\n\tmoment.tz = tz;\n\n\tmoment.defaultZone = null;\n\n\tmoment.updateOffset = function (mom, keepTime) {\n\t\tvar zone = moment.defaultZone,\n\t\t\toffset;\n\n\t\tif (mom._z === undefined) {\n\t\t\tif (zone && needsOffset(mom) && !mom._isUTC) {\n\t\t\t\tmom._d = moment.utc(mom._a)._d;\n\t\t\t\tmom.utc().add(zone.parse(mom), 'minutes');\n\t\t\t}\n\t\t\tmom._z = zone;\n\t\t}\n\t\tif (mom._z) {\n\t\t\toffset = mom._z.utcOffset(mom);\n\t\t\tif (Math.abs(offset) < 16) {\n\t\t\t\toffset = offset / 60;\n\t\t\t}\n\t\t\tif (mom.utcOffset !== undefined) {\n\t\t\t\tvar z = mom._z;\n\t\t\t\tmom.utcOffset(-offset, keepTime);\n\t\t\t\tmom._z = z;\n\t\t\t} else {\n\t\t\t\tmom.zone(offset, keepTime);\n\t\t\t}\n\t\t}\n\t};\n\n\tfn.tz = function (name, keepTime) {\n\t\tif (name) {\n\t\t\tif (typeof name !== 'string') {\n\t\t\t\tthrow new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');\n\t\t\t}\n\t\t\tthis._z = getZone(name);\n\t\t\tif (this._z) {\n\t\t\t\tmoment.updateOffset(this, keepTime);\n\t\t\t} else {\n\t\t\t\tlogError(\"Moment Timezone has no data for \" + name + \". See http://momentjs.com/timezone/docs/#/data-loading/.\");\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif (this._z) { return this._z.name; }\n\t};\n\n\tfunction abbrWrap (old) {\n\t\treturn function () {\n\t\t\tif (this._z) { return this._z.abbr(this); }\n\t\t\treturn old.call(this);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap (old) {\n\t\treturn function () {\n\t\t\tthis._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfunction resetZoneWrap2 (old) {\n\t\treturn function () {\n\t\t\tif (arguments.length > 0) this._z = null;\n\t\t\treturn old.apply(this, arguments);\n\t\t};\n\t}\n\n\tfn.zoneName  = abbrWrap(fn.zoneName);\n\tfn.zoneAbbr  = abbrWrap(fn.zoneAbbr);\n\tfn.utc       = resetZoneWrap(fn.utc);\n\tfn.local     = resetZoneWrap(fn.local);\n\tfn.utcOffset = resetZoneWrap2(fn.utcOffset);\n\n\tmoment.tz.setDefault = function(name) {\n\t\tif (major < 2 || (major === 2 && minor < 9)) {\n\t\t\tlogError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');\n\t\t}\n\t\tmoment.defaultZone = name ? getZone(name) : null;\n\t\treturn moment;\n\t};\n\n\t// Cloning a moment should include the _z property.\n\tvar momentProperties = moment.momentProperties;\n\tif (Object.prototype.toString.call(momentProperties) === '[object Array]') {\n\t\t// moment 2.8.1+\n\t\tmomentProperties.push('_z');\n\t\tmomentProperties.push('_a');\n\t} else if (momentProperties) {\n\t\t// moment 2.7.0\n\t\tmomentProperties._z = null;\n\t}\n\n\t// INJECT DATA\n\n\treturn moment;\n}));\n","import Dygraph from 'dygraphs';\n\nexport class Synchronizer {\n\n    args: Array<any>;\n    graphs: Array<Dygraph>;\n\n    constructor(graphs: Array<Dygraph>) {\n        this.graphs = graphs;\n        this.args = graphs.concat([{\n            zoom: true,\n            selection: false\n        }]);\n    }\n\n    synchronize = () => {\n        if (this.args.length === 0) {\n            throw 'Invalid invocation of Dygraph.synchronize(). Need >= 1 argument.';\n        }\n\n        var OPTIONS = ['selection', 'zoom', 'range'];\n        var opts = {\n            selection: true,\n            zoom: true,\n            range: true\n        };\n        var dygraphs = [];\n        var prevCallbacks = [];\n\n        var parseOpts = function (obj) {\n            if (!(obj instanceof Object)) {\n                throw 'Last argument must be either Dygraph or Object.';\n            } else {\n                for (var i = 0; i < OPTIONS.length; i++) {\n                    var optName = OPTIONS[i];\n                    if (obj.hasOwnProperty(optName)) opts[optName] = obj[optName];\n                }\n            }\n        };\n\n        var arraysAreEqual = (a, b) => {\n            if (!Array.isArray(a) || !Array.isArray(b)) return false;\n            var i = a.length;\n            if (i !== b.length) return false;\n            while (i--) {\n                if (a[i] !== b[i]) return false;\n            }\n            return true;\n        }\n\n        var attachZoomHandlers = (gs, syncOpts, prevCallbacks) => {\n            var block = false;\n            for (var i = 0; i < gs.length; i++) {\n                var g = gs[i];\n                g.updateOptions({\n                    drawCallback: function (me, initial) {\n                        if (block || initial) return;\n                        block = true;\n                        var opts: { dateWindow: any, valueRange?: any } = {\n                            dateWindow: me.xAxisRange()\n                        };\n                        if (syncOpts.range) opts.valueRange = me.yAxisRange();\n\n                        for (var j = 0; j < gs.length; j++) {\n                            if (gs[j] == me) {\n                                if (prevCallbacks[j] && prevCallbacks[j].drawCallback) {\n                                    prevCallbacks[j].drawCallback.apply(this, arguments);\n                                }\n                                continue;\n                            }\n\n                            // Only redraw if there are new options\n                            if (arraysAreEqual(opts.dateWindow, gs[j].getOption('dateWindow')) &&\n                                arraysAreEqual(opts.valueRange, gs[j].getOption('valueRange'))) {\n                                continue;\n                            }\n\n                            gs[j].updateOptions(opts);\n                        }\n                        block = false;\n                    }\n                }, true /* no need to redraw */);\n            }\n        }\n\n        var attachSelectionHandlers = (gs, prevCallbacks) => {\n            var block = false;\n            for (var i = 0; i < gs.length; i++) {\n                var g = gs[i];\n\n                g.updateOptions({\n                    highlightCallback: function (event, x, points, row, seriesName) {\n                        if (block) return;\n                        block = true;\n                        var me = this;\n                        for (var i = 0; i < gs.length; i++) {\n                            if (me == gs[i]) {\n                                if (prevCallbacks[i] && prevCallbacks[i].highlightCallback) {\n                                    prevCallbacks[i].highlightCallback.apply(this, arguments);\n                                }\n                                continue;\n                            }\n                            var idx = gs[i].getRowForX(x);\n                            if (idx !== null) {\n                                gs[i].setSelection(idx, seriesName);\n                            }\n                        }\n                        block = false;\n                    },\n                    unhighlightCallback: function (event) {\n                        if (block) return;\n                        block = true;\n                        var me = this;\n                        for (var i = 0; i < gs.length; i++) {\n                            if (me == gs[i]) {\n                                if (prevCallbacks[i] && prevCallbacks[i].unhighlightCallback) {\n                                    prevCallbacks[i].unhighlightCallback.apply(this, arguments);\n                                }\n                                continue;\n                            }\n                            gs[i].clearSelection();\n                        }\n                        block = false;\n                    }\n                }, true /* no need to redraw */);\n            }\n        }\n\n\n        if (this.args[0] instanceof Dygraph) {\n            // Arguments are Dygraph objects.\n            for (var i = 0; i < this.args.length; i++) {\n                if (this.args[i] instanceof Dygraph) {\n                    dygraphs.push(this.args[i]);\n                } else {\n                    break;\n                }\n            }\n            if (i < this.args.length - 1) {\n                throw 'Invalid invocation of Dygraph.synchronize(). ' +\n                'All but the last argument must be Dygraph objects.';\n            } else if (i == this.args.length - 1) {\n                parseOpts(this.args[this.args.length - 1]);\n            }\n        } else if (this.args[0].length) {\n            // Invoked w/ list of dygraphs, options\n            for (var i = 0; i < this.args[0].length; i++) {\n                dygraphs.push(this.args[0][i]);\n            }\n            if (this.args.length == 2) {\n                parseOpts(this.args[1]);\n            } else if (this.args.length > 2) {\n                throw 'Invalid invocation of Dygraph.synchronize(). ' +\n                'Expected two arguments: array and optional options argument.';\n            }  // otherwise arguments.length == 1, which is fine.\n        } else {\n            throw 'Invalid invocation of Dygraph.synchronize(). ' +\n            'First parameter must be either Dygraph or list of Dygraphs.';\n        }\n\n        if (dygraphs.length < 2) {\n            throw 'Invalid invocation of Dygraph.synchronize(). ' +\n            'Need two or more dygraphs to synchronize.';\n        }\n\n        var readycount = dygraphs.length;\n        for (var i = 0; i < dygraphs.length; i++) {\n            var g = dygraphs[i];\n            g.ready(function () {\n                if (--readycount == 0) {\n                    // store original callbacks\n                    var callBackTypes = ['drawCallback', 'highlightCallback', 'unhighlightCallback'];\n                    for (var j = 0; j < dygraphs.length; j++) {\n                        if (!prevCallbacks[j]) {\n                            prevCallbacks[j] = {};\n                        }\n                        for (var k = callBackTypes.length - 1; k >= 0; k--) {\n                            prevCallbacks[j][callBackTypes[k]] = dygraphs[j].getFunctionOption(callBackTypes[k]);\n                        }\n                    }\n\n                    // Listen for draw, highlight, unhighlight callbacks.\n                    if (opts.zoom) {\n                        attachZoomHandlers(dygraphs, opts, prevCallbacks);\n                    }\n\n                    if (opts.selection) {\n                        attachSelectionHandlers(dygraphs, prevCallbacks);\n                    }\n                }\n            });\n        }\n\n        return {\n            detach: function () {\n                for (var i = 0; i < dygraphs.length; i++) {\n                    var g = dygraphs[i];\n                    if (opts.zoom) {\n                        g.updateOptions({ drawCallback: prevCallbacks[i].drawCallback });\n                    }\n                    if (opts.selection) {\n                        g.updateOptions({\n                            highlightCallback: prevCallbacks[i].highlightCallback,\n                            unhighlightCallback: prevCallbacks[i].unhighlightCallback\n                        });\n                    }\n                }\n                // release references & make subsequent calls throw.\n                dygraphs = null;\n                opts = null;\n                prevCallbacks = null;\n            },\n            graphs: [this.graphs]\n        };\n    };\n\n\n\n\n}","import Dygraph from 'dygraphs';\n\n\nexport class GraphInteractions {\n\n\n    private panEnable: boolean;\n\n    private mouseTimer: number;\n\n    private scrollEnable: boolean;\n\n    private scrollTimer: number;\n\n    private preDatewindow: Array<any>;\n\n    private needRefresh: boolean;\n\n    private yAxisRangeChanged: boolean;\n\n    constructor(public callback: any, public dateRange?: Array<number>) {\n        this.panEnable = false;\n        this.scrollEnable = false;\n    }\n\n    private pageX = (e) => {\n        return !e.pageX || e.pageX < 0 ? 0 : e.pageX;\n    }\n\n    private pageY = (e) => {\n        return !e.pageY || e.pageY < 0 ? 0 : e.pageY;\n    }\n\n    private dragGetX_ = (e, context) => {\n        return this.pageX(e) - context.px;\n    }\n\n    private dragGetY_ = (e, context) => {\n        return this.pageY(e) - context.py;\n    }\n\n    private cancelEvent = (e) => {\n        e = e ? e : window.event;\n        if (e.stopPropagation) {\n            e.stopPropagation();\n        }\n        if (e.preventDefault) {\n            e.preventDefault();\n        }\n        e.cancelBubble = true;\n        e.cancel = true;\n        e.returnValue = false;\n        return false;\n    }\n\n    private offsetToPercentage = (g, offsetX, offsetY) => {\n        // This is calculating the pixel offset of the leftmost date.\n        var xOffset = g.toDomCoords(g.xAxisRange()[0], null)[0];\n        var yar0 = g.yAxisRange(0);\n\n        // This is calculating the pixel of the higest value. (Top pixel)\n        var yOffset = g.toDomCoords(null, yar0[1])[1];\n\n        // x y w and h are relative to the corner of the drawing area,\n        // so that the upper corner of the drawing area is (0, 0).\n        var x = offsetX - xOffset;\n        var y = offsetY - yOffset;\n\n        // This is computing the rightmost pixel, effectively defining the\n        // width.\n        var w = g.toDomCoords(g.xAxisRange()[1], null)[0] - xOffset;\n\n        // This is computing the lowest pixel, effectively defining the height.\n        var h = g.toDomCoords(null, yar0[0])[1] - yOffset;\n\n        // Percentage from the left.\n        var xPct = w == 0 ? 0 : (x / w);\n        // Percentage from the top.\n        var yPct = h == 0 ? 0 : (y / h);\n\n        // The (1-) part below changes it from \"% distance down from the top\"\n        // to \"% distance up from the bottom\".\n        return [xPct, (1 - yPct)];\n    }\n\n    private pan = (event, g, context, side) => {\n        context.dragEndX = this.dragGetX_(event, context);\n        context.dragEndY = this.dragGetY_(event, context);\n\n        var minDate = context.initialLeftmostDate - (context.dragEndX - context.dragStartX) * context.xUnitsPerPixel;\n        if (context.boundedDates) {\n            minDate = Math.max(minDate, context.boundedDates[0]);\n        }\n        var maxDate = minDate + context.dateRange;\n        if (context.boundedDates) {\n            if (maxDate > context.boundedDates[1]) {\n                // Adjust minDate, and recompute maxDate.\n                minDate = minDate - (maxDate - context.boundedDates[1]);\n                maxDate = minDate + context.dateRange;\n            }\n        }\n\n        // y-axis scaling is automatic unless this is a full 2D pan.\n        if (context.is2DPan) {\n            var pixelsDragged = context.dragEndY - context.dragStartY;\n            // Adjust each axis appropriately.\n            if (side && (\"r\" == side || \"l\" == side)) {\n                var index = (side == 'l' ? 0 : 1);\n                var axis = g.axes_[index];\n                var axis_data = context.axes[index];\n                var unitsDragged = pixelsDragged * axis_data.unitsPerPixel;\n                var boundedValue = context.boundedValues ? context.boundedValues[index] : null;\n                // In log scale, maxValue and minValue are the logs of those values.\n                var maxValue = axis_data.initialTopValue + unitsDragged;\n                if (boundedValue) {\n                    maxValue = Math.min(maxValue, boundedValue[index]);\n                }\n                var minValue = maxValue - axis_data.dragValueRange;\n\n                if (boundedValue) {\n                    if (minValue < boundedValue[0]) {\n                        // Adjust maxValue, and recompute minValue.\n                        maxValue = maxValue - (minValue - boundedValue[0]);\n                        minValue = maxValue - axis_data.dragValueRange;\n                    }\n                }\n                if (g.attributes_.getForAxis(\"logscale\", index)) {\n                    axis.valueRange = [Math.pow(10, minValue), Math.pow(10, maxValue)];\n                } else {\n                    axis.valueRange = [minValue, maxValue];\n                }\n                // console.debug(axis.valueRange);\n            } else {\n                //\n                var zoomRange = this.dateRange;\n                if (minDate < zoomRange[0] || maxDate > zoomRange[1]) {\n                    // console.info(\"return~~~~\", new Date(minDate), new Date(zoomRange[0]), new Date(maxDate), new Date(zoomRange[1]));\n                    return;\n                }\n                if (g.getOptionForAxis(\"logscale\", \"x\")) {\n                    g.dateWindow_ = [new Date(Math.pow(10, minDate)), new Date(Math.pow(10, maxDate))];\n                } else {\n                    g.dateWindow_ = [new Date(minDate), new Date(maxDate)];\n                }\n            }\n        }\n        g.drawGraph_(false);\n    }\n\n    private adjustAxis = (axis, zoomInPercentage, bias) => {\n        var delta = axis[1] - axis[0];\n        var increment = delta * zoomInPercentage;\n        var foo = [increment * bias, increment * (1 - bias)];\n        return [axis[0] + foo[0], axis[1] - foo[1]];\n    }\n\n    private zoom = (g, zoomInPercentage, xBias, yBias, direction, side, e?) => {\n\n        xBias = xBias || 0.5;\n        yBias = yBias || 0.5;\n        var yAxes = g.axes_;\n        var newYAxes = [];\n        for (var i = 0; i < g.numAxes(); i++) {\n            newYAxes[i] = this.adjustAxis(yAxes[i].valueRange, zoomInPercentage, yBias);\n        }\n\n\n        if ('v' == direction) {\n            if ('l' == side) {\n                yAxes[0]['valueRange'] = newYAxes[0];\n                yAxes[0]['valueWindow'] = newYAxes[0];\n            } else if ('r' == side && g.numAxes() == 2) {\n                yAxes[1]['valueRange'] = newYAxes[1];\n                yAxes[1]['valueWindow'] = newYAxes[1];\n            }\n            g.drawGraph_(false);\n        } else {\n            if (this.scrollTimer) {\n                window.clearTimeout(this.scrollTimer);\n            }\n\n\n            var ranges = g.dateWindow_;\n            if (ranges[0] instanceof Date) {\n                ranges[0] = ranges[0].getTime();\n                ranges[1] = ranges[1].getTime();\n            }\n\n            var newZoomRange = this.adjustAxis(ranges, zoomInPercentage, xBias);\n            // do not bigger than range data\n            var zoomRange = this.dateRange;\n            this.scrollTimer = window.setTimeout(() => {\n                this.callback(e, g.yAxisRanges(), true);\n            }, 500);\n            if (newZoomRange[0] < zoomRange[0] && newZoomRange[1] > zoomRange[1]) {\n                return;\n            } else if (newZoomRange[0] >= newZoomRange[1]) {\n                return;\n            } else if (newZoomRange[0] <= zoomRange[0] && newZoomRange[1] < zoomRange[1]) {\n                g.updateOptions({\n                    dateWindow: [zoomRange[0], newZoomRange[1]]\n                });\n            } else if (newZoomRange[0] > zoomRange[0] && newZoomRange[1] >= zoomRange[1]) {\n                g.updateOptions({\n                    dateWindow: [newZoomRange[0], zoomRange[1]]\n                });\n            } else {\n                g.updateOptions({\n                    dateWindow: [newZoomRange[0], newZoomRange[1]]\n                });\n            }\n        }\n    }\n\n    public mouseUp = (e, g, context) => {\n        // console.debug(\"mouse up\");\n        let currentDatewindow = g.dateWindow_;\n        if (currentDatewindow[0] instanceof Date) {\n            currentDatewindow[0] = currentDatewindow[0].getTime();\n            currentDatewindow[1] = currentDatewindow[1].getTime();\n        }\n\n        context.isPanning = false;\n        Dygraph.endPan(event, g, context);\n        // call upadte this.panEnable = false;\n        if (this.panEnable && this.needRefresh && (this.preDatewindow[0] != currentDatewindow[0] || this.preDatewindow[1] != currentDatewindow[1])) {\n            this.callback(e, g.yAxisRanges(), true);\n            this.panEnable = false;\n        } else if (this.yAxisRangeChanged) {\n            this.callback(e, g.yAxisRanges(), false);\n            this.panEnable = false;\n        }\n    }\n\n    public mouseDown = (e, g, context) => {\n        this.preDatewindow = g.dateWindow_;\n        if (this.preDatewindow[0] instanceof Date) {\n            this.preDatewindow[0] = this.preDatewindow[0].getTime();\n            this.preDatewindow[1] = this.preDatewindow[1].getTime();\n        }\n\n        this.panEnable = true;\n        context.initializeMouseDown(event, g, context);\n        Dygraph.startPan(event, g, context);\n        // console.debug(\"mouse down\", context);\n    }\n\n    public mouseMove = (e, g, context) => {\n        if (this.panEnable && context.isPanning) {\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                this.needRefresh = false;\n                this.yAxisRangeChanged = true;\n                this.pan(e, g, context, 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                this.needRefresh = false;\n                this.yAxisRangeChanged = true;\n                this.pan(e, g, context, 'r');\n            } else {\n                this.needRefresh = true;\n                this.pan(e, g, context, 'h');\n            }\n        }\n    }\n\n    public mouseOut = (e, g, context) => {\n        // console.debug(\"mouse out\");\n        if (this.mouseTimer) {\n            window.clearTimeout(this.mouseTimer);\n        }\n        this.scrollEnable = false;\n\n    }\n\n    public mouseScroll = (e, g, context) => {\n        if (this.scrollEnable) {\n            //\n            var normal;\n\n            if (e instanceof WheelEvent) {\n                normal = e.detail ? e.detail * -1 : e.deltaY / 40;\n            } else {\n                normal = e.detail ? e.detail * -1 : e.wheelDelta / 40;\n            }\n\n            // For me the normalized value shows 0.075 for one click. If I took\n            // that verbatim, it would be a 7.5%.\n            var percentage = normal / 50;\n\n            if (!(e.offsetX && e.offsetY)) {\n                e.offsetX = e.layerX - e.target.offsetLeft;\n                e.offsetY = e.layerY - e.target.offsetTop;\n            }\n            var percentages = this.offsetToPercentage(g, e.offsetX, e.offsetY);\n            var xPct = percentages[0];\n            var yPct = percentages[1];\n            //\n            if (e.offsetX <= (g.plotter_.area.x)) {\n                // left zoom\n                this.zoom(g, percentage, xPct, yPct, 'v', 'l');\n            } else if (e.offsetX >= (g.plotter_.area.x + g.plotter_.area.w)) {\n                // right zoom\n                this.zoom(g, percentage, xPct, yPct, 'v', 'r');\n            } else {\n                // middle zoom\n                this.zoom(g, percentage, xPct, yPct, 'h', null);\n            }\n            this.cancelEvent(e);\n        }\n    }\n\n    public mouseEnter = (e, g, context) => {\n\n        if (this.mouseTimer) {\n            window.clearTimeout(this.mouseTimer);\n        }\n        this.mouseTimer = window.setTimeout(() => {\n            this.scrollEnable = true;\n            // console.debug(\"enable scroll zooming~\");\n        }, 1000);\n    }\n\n\n}"],"sourceRoot":""}